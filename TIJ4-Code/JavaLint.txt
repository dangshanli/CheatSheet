========================================
./access
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ChocolateChip.java:3: error: package access.dessert does not exist
import access.dessert.*;
^
ChocolateChip.java:5: error: cannot find symbol
public class ChocolateChip extends Cookie {
                                   ^
  symbol: class Cookie
ChocolateChip2.java:2: error: package access.cookie2 does not exist
import access.cookie2.*;
^
ChocolateChip2.java:4: error: cannot find symbol
public class ChocolateChip2 extends Cookie {
                                    ^
  symbol: class Cookie
Dinner.java:3: error: package access.dessert does not exist
import access.dessert.*;
^
ImportedMyClass.java:2: error: package access.mypackage does not exist
import access.mypackage.*;
^
LibTest.java:3: error: package net.mindview.simple does not exist
import net.mindview.simple.*;
^
PrintTest.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^

========================================
./access/cookie2
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./access/dessert
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./access/mypackage
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./annotations
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AtUnitComposition.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitComposition.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExample1.java:3: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExample1.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExample2.java:5: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExample2.java:6: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExample3.java:3: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExample3.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExample4.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExample4.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExample4.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AtUnitExample5.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExample5.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitExternalTest.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitExternalTest.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
HashSetTest.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
HashSetTest.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
InterfaceExtractorProcessor.java:7: error: package com.sun.mirror.apt does not exist
import com.sun.mirror.apt.*;
^
InterfaceExtractorProcessor.java:8: error: package com.sun.mirror.declaration does not exist
import com.sun.mirror.declaration.*;
^
InterfaceExtractorProcessor.java:13: error: cannot find symbol
  implements AnnotationProcessor {
             ^
  symbol: class AnnotationProcessor
InterfaceExtractorProcessor.java:14: error: cannot find symbol
  private final AnnotationProcessorEnvironment env;
                ^
  symbol:   class AnnotationProcessorEnvironment
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:15: error: cannot find symbol
  private ArrayList<MethodDeclaration> interfaceMethods =
                    ^
  symbol:   class MethodDeclaration
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:18: error: cannot find symbol
    AnnotationProcessorEnvironment env) { this.env = env; }
    ^
  symbol:   class AnnotationProcessorEnvironment
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessorFactory.java:4: error: package com.sun.mirror.apt does not exist
import com.sun.mirror.apt.*;
^
InterfaceExtractorProcessorFactory.java:5: error: package com.sun.mirror.declaration does not exist
import com.sun.mirror.declaration.*;
^
InterfaceExtractorProcessorFactory.java:9: error: cannot find symbol
  implements AnnotationProcessorFactory {
             ^
  symbol: class AnnotationProcessorFactory
InterfaceExtractorProcessorFactory.java:11: error: cannot find symbol
    Set<AnnotationTypeDeclaration> atds,
        ^
  symbol:   class AnnotationTypeDeclaration
  location: class InterfaceExtractorProcessorFactory
InterfaceExtractorProcessorFactory.java:12: error: cannot find symbol
    AnnotationProcessorEnvironment env) {
    ^
  symbol:   class AnnotationProcessorEnvironment
  location: class InterfaceExtractorProcessorFactory
InterfaceExtractorProcessorFactory.java:10: error: cannot find symbol
  public AnnotationProcessor getProcessorFor(
         ^
  symbol:   class AnnotationProcessor
  location: class InterfaceExtractorProcessorFactory
StackLStringTest.java:4: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
StackLStringTest.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Testable.java:3: error: package net.mindview.atunit does not exist
import net.mindview.atunit.*;
^
AtUnitComposition.java:9: error: cannot find symbol
  @Test boolean _methodOne() {
   ^
  symbol:   class Test
  location: class AtUnitComposition
AtUnitComposition.java:13: error: cannot find symbol
  @Test boolean _methodTwo() {
   ^
  symbol:   class Test
  location: class AtUnitComposition
AtUnitExample1.java:14: error: cannot find symbol
  @Test boolean methodOneTest() {
   ^
  symbol:   class Test
  location: class AtUnitExample1
AtUnitExample1.java:17: error: cannot find symbol
  @Test boolean m2() { return methodTwo() == 2; }
   ^
  symbol:   class Test
  location: class AtUnitExample1
AtUnitExample1.java:18: error: cannot find symbol
  @Test private boolean m3() { return true; }
   ^
  symbol:   class Test
  location: class AtUnitExample1
AtUnitExample1.java:20: error: cannot find symbol
  @Test boolean failureTest() { return false; }
   ^
  symbol:   class Test
  location: class AtUnitExample1
AtUnitExample1.java:21: error: cannot find symbol
  @Test boolean anotherDisappointment() { return false; }
   ^
  symbol:   class Test
  location: class AtUnitExample1
AtUnitExample2.java:16: error: cannot find symbol
  @Test void assertExample() {
   ^
  symbol:   class Test
  location: class AtUnitExample2
AtUnitExample2.java:19: error: cannot find symbol
  @Test void assertFailureExample() {
   ^
  symbol:   class Test
  location: class AtUnitExample2
AtUnitExample2.java:22: error: cannot find symbol
  @Test void exceptionExample() throws IOException {
   ^
  symbol:   class Test
  location: class AtUnitExample2
AtUnitExample2.java:25: error: cannot find symbol
  @Test boolean assertAndReturn() {
   ^
  symbol:   class Test
  location: class AtUnitExample2
AtUnitExample3.java:17: error: cannot find symbol
  @TestObjectCreate static AtUnitExample3 create() {
   ^
  symbol:   class TestObjectCreate
  location: class AtUnitExample3
AtUnitExample3.java:20: error: cannot find symbol
  @Test boolean initialization() { return n == 47; }
   ^
  symbol:   class Test
  location: class AtUnitExample3
AtUnitExample3.java:21: error: cannot find symbol
  @Test boolean methodOneTest() {
   ^
  symbol:   class Test
  location: class AtUnitExample3
AtUnitExample3.java:24: error: cannot find symbol
  @Test boolean m2() { return methodTwo() == 2; }
   ^
  symbol:   class Test
  location: class AtUnitExample3
AtUnitExample4.java:26: error: cannot find symbol
  @TestProperty static List<String> input =
   ^
  symbol:   class TestProperty
  location: class AtUnitExample4
AtUnitExample4.java:28: error: cannot find symbol
  @TestProperty
   ^
  symbol:   class TestProperty
  location: class AtUnitExample4
AtUnitExample4.java:30: error: cannot find symbol
  @TestObjectCreate static AtUnitExample4 create() {
   ^
  symbol:   class TestObjectCreate
  location: class AtUnitExample4
AtUnitExample4.java:36: error: cannot find symbol
  @Test boolean words() {
   ^
  symbol:   class Test
  location: class AtUnitExample4
AtUnitExample4.java:40: error: cannot find symbol
  @Test boolean scramble1() {
   ^
  symbol:   class Test
  location: class AtUnitExample4
AtUnitExample4.java:48: error: cannot find symbol
  @Test boolean scramble2() {
   ^
  symbol:   class Test
  location: class AtUnitExample4
AtUnitExample5.java:11: error: cannot find symbol
  @TestProperty static PrintWriter output;
   ^
  symbol:   class TestProperty
  location: class AtUnitExample5
AtUnitExample5.java:12: error: cannot find symbol
  @TestProperty static int counter;
   ^
  symbol:   class TestProperty
  location: class AtUnitExample5
AtUnitExample5.java:13: error: cannot find symbol
  @TestObjectCreate static AtUnitExample5 create() {
   ^
  symbol:   class TestObjectCreate
  location: class AtUnitExample5
AtUnitExample5.java:22: error: cannot find symbol
  @TestObjectCleanup static void
   ^
  symbol:   class TestObjectCleanup
  location: class AtUnitExample5
AtUnitExample5.java:27: error: cannot find symbol
  @Test boolean test1() {
   ^
  symbol:   class Test
  location: class AtUnitExample5
AtUnitExample5.java:31: error: cannot find symbol
  @Test boolean test2() {
   ^
  symbol:   class Test
  location: class AtUnitExample5
AtUnitExample5.java:35: error: cannot find symbol
  @Test boolean test3() {
   ^
  symbol:   class Test
  location: class AtUnitExample5
AtUnitExternalTest.java:8: error: cannot find symbol
  @Test boolean _methodOne() {
   ^
  symbol:   class Test
  location: class AtUnitExternalTest
AtUnitExternalTest.java:11: error: cannot find symbol
  @Test boolean _methodTwo() { return methodTwo() == 2; }
   ^
  symbol:   class Test
  location: class AtUnitExternalTest
HashSetTest.java:9: error: cannot find symbol
  @Test void initialization() {
   ^
  symbol:   class Test
  location: class HashSetTest
HashSetTest.java:12: error: cannot find symbol
  @Test void _contains() {
   ^
  symbol:   class Test
  location: class HashSetTest
HashSetTest.java:16: error: cannot find symbol
  @Test void _remove() {
   ^
  symbol:   class Test
  location: class HashSetTest
StackLStringTest.java:8: error: cannot find symbol
  @Test void _push() {
   ^
  symbol:   class Test
  location: class StackLStringTest
StackLStringTest.java:14: error: cannot find symbol
  @Test void _pop() {
   ^
  symbol:   class Test
  location: class StackLStringTest
StackLStringTest.java:20: error: cannot find symbol
  @Test void _top() {
   ^
  symbol:   class Test
  location: class StackLStringTest
Testable.java:9: error: cannot find symbol
  @Test void testExecute() { execute(); }
   ^
  symbol:   class Test
  location: class Testable
AtUnitComposition.java:17: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitComposition
AtUnitExample1.java:23: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExample1
AtUnitExample2.java:31: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExample2
AtUnitExample3.java:26: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExample3
AtUnitExample4.java:37: error: cannot find symbol
    print("'" + getWord() + "'");
    ^
  symbol:   method print(String)
  location: class AtUnitExample4
AtUnitExample4.java:43: error: cannot find symbol
    print("'" + getWord() + "'");
    ^
  symbol:   method print(String)
  location: class AtUnitExample4
AtUnitExample4.java:45: error: cannot find symbol
    print(scrambled);
    ^
  symbol:   method print(String)
  location: class AtUnitExample4
AtUnitExample4.java:50: error: cannot find symbol
    print("'" + getWord() + "'");
    ^
  symbol:   method print(String)
  location: class AtUnitExample4
AtUnitExample4.java:52: error: cannot find symbol
    print(scrambled);
    ^
  symbol:   method print(String)
  location: class AtUnitExample4
AtUnitExample4.java:57: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExample4
AtUnitExample5.java:40: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExample5
AtUnitExternalTest.java:13: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class AtUnitExternalTest
HashSetTest.java:22: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class HashSetTest
InterfaceExtractorProcessor.java:16: error: cannot find symbol
    new ArrayList<MethodDeclaration>();
                  ^
  symbol:   class MethodDeclaration
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:20: error: cannot find symbol
    for(TypeDeclaration typeDecl :
        ^
  symbol:   class TypeDeclaration
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:26: error: cannot find symbol
      for(MethodDeclaration m : typeDecl.getMethods())
          ^
  symbol:   class MethodDeclaration
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:27: error: cannot find symbol
        if(m.getModifiers().contains(Modifier.PUBLIC) &&
                                     ^
  symbol:   variable Modifier
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:28: error: cannot find symbol
           !(m.getModifiers().contains(Modifier.STATIC)))
                                       ^
  symbol:   variable Modifier
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:38: error: cannot find symbol
          for(MethodDeclaration m : interfaceMethods) {
              ^
  symbol:   class MethodDeclaration
  location: class InterfaceExtractorProcessor
InterfaceExtractorProcessor.java:43: error: cannot find symbol
            for(ParameterDeclaration parm :
                ^
  symbol:   class ParameterDeclaration
  location: class InterfaceExtractorProcessor
StackLStringTest.java:27: error: cannot find symbol
    OSExecute.command(
    ^
  symbol:   variable OSExecute
  location: class StackLStringTest
90 errors
3 warnings

========================================
./annotations/database
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
TableCreationProcessorFactory.java:7: error: package com.sun.mirror.apt does not exist
import com.sun.mirror.apt.*;
^
TableCreationProcessorFactory.java:8: error: package com.sun.mirror.declaration does not exist
import com.sun.mirror.declaration.*;
^
TableCreationProcessorFactory.java:9: error: package com.sun.mirror.util does not exist
import com.sun.mirror.util.*;
^
TableCreationProcessorFactory.java:11: error: package com.sun.mirror.util does not exist
import static com.sun.mirror.util.DeclarationVisitors.*;
                                 ^
TableCreationProcessorFactory.java:14: error: cannot find symbol
  implements AnnotationProcessorFactory {
             ^
  symbol: class AnnotationProcessorFactory
TableCreationProcessorFactory.java:16: error: cannot find symbol
    Set<AnnotationTypeDeclaration> atds,
        ^
  symbol:   class AnnotationTypeDeclaration
  location: class TableCreationProcessorFactory
TableCreationProcessorFactory.java:17: error: cannot find symbol
    AnnotationProcessorEnvironment env) {
    ^
  symbol:   class AnnotationProcessorEnvironment
  location: class TableCreationProcessorFactory
TableCreationProcessorFactory.java:15: error: cannot find symbol
  public AnnotationProcessor getProcessorFor(
         ^
  symbol:   class AnnotationProcessor
  location: class TableCreationProcessorFactory
TableCreationProcessorFactory.java:31: error: cannot find symbol
    implements AnnotationProcessor {
               ^
  symbol:   class AnnotationProcessor
  location: class TableCreationProcessorFactory
TableCreationProcessorFactory.java:32: error: cannot find symbol
    private final AnnotationProcessorEnvironment env;
                  ^
  symbol:   class AnnotationProcessorEnvironment
  location: class TableCreationProcessor
TableCreationProcessorFactory.java:35: error: cannot find symbol
      AnnotationProcessorEnvironment env) {
      ^
  symbol:   class AnnotationProcessorEnvironment
  location: class TableCreationProcessor
TableCreationProcessorFactory.java:49: error: cannot find symbol
      extends SimpleDeclarationVisitor {
              ^
  symbol:   class SimpleDeclarationVisitor
  location: class TableCreationProcessor
TableCreationProcessorFactory.java:51: error: cannot find symbol
        ClassDeclaration d) {
        ^
  symbol:   class ClassDeclaration
  location: class TableCreationProcessor.TableCreationVisitor
TableCreationProcessorFactory.java:62: error: cannot find symbol
        FieldDeclaration d) {
        ^
  symbol:   class FieldDeclaration
  location: class TableCreationProcessor.TableCreationVisitor
TableCreationProcessorFactory.java:39: error: cannot find symbol
      for(TypeDeclaration typeDecl :
          ^
  symbol:   class TypeDeclaration
  location: class TableCreationProcessor
TableCreationProcessorFactory.java:42: error: cannot find symbol
          new TableCreationVisitor(), NO_OP));
                                      ^
  symbol:   variable NO_OP
  location: class TableCreationProcessor

========================================
./arrays
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AlphabeticSearch.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ArrayOptions.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArraySearching.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ArraySearching.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CompType.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CompType.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CompType.java:25: error: cannot find symbol
  public static Generator<CompType> generator() {
                ^
  symbol:   class Generator
  location: class CompType
ComparatorTest.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ComparatorTest.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ComparingArrays.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ContainerComparison.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CopyingArrays.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
FillingArrays.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
GeneratorsTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PrimitiveConversionDemonstration.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
RandomGeneratorsTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Reverse.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Reverse.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
StringSorting.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
StringSorting.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TestArrayGeneration.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TestArrayGeneration.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TestGenerated.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AlphabeticSearch.java:9: error: package RandomGenerator does not exist
      new RandomGenerator.String(5));
                         ^
AlphabeticSearch.java:8: error: cannot find symbol
    String[] sa = Generated.array(new String[30],
                  ^
  symbol:   variable Generated
  location: class AlphabeticSearch
ArrayOfGenerics.java:9: warning: [rawtypes] found raw type: List
    List[] la = new List[10];
    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
ArrayOfGenerics.java:9: warning: [rawtypes] found raw type: List
    List[] la = new List[10];
                    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
ArrayOfGenerics.java:23: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    List<BerylliumSphere>[] spheres =
         ^
ArrayOfGenerics.java:24: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      (List<BerylliumSphere>[])new List[10];
            ^
ArrayOfGenerics.java:24: warning: [rawtypes] found raw type: List
      (List<BerylliumSphere>[])new List[10];
                                   ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
ArrayOfGenerics.java:26: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      spheres[i] = new ArrayList<BerylliumSphere>();
                                 ^
ArrayOptions.java:9: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] a; // Local uninitialized variable
    ^
ArrayOptions.java:10: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] b = new BerylliumSphere[5];
    ^
ArrayOptions.java:10: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] b = new BerylliumSphere[5];
                              ^
ArrayOptions.java:13: error: cannot find symbol
    print("b: " + Arrays.toString(b));
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:14: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] c = new BerylliumSphere[4];
    ^
ArrayOptions.java:14: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] c = new BerylliumSphere[4];
                              ^
ArrayOptions.java:17: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        c[i] = new BerylliumSphere();
                   ^
ArrayOptions.java:19: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] d = { new BerylliumSphere(),
    ^
ArrayOptions.java:19: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[] d = { new BerylliumSphere(),
                                ^
ArrayOptions.java:20: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      new BerylliumSphere(), new BerylliumSphere()
          ^
ArrayOptions.java:20: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      new BerylliumSphere(), new BerylliumSphere()
                                 ^
ArrayOptions.java:23: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    a = new BerylliumSphere[]{
            ^
ArrayOptions.java:24: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      new BerylliumSphere(), new BerylliumSphere(),
          ^
ArrayOptions.java:24: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      new BerylliumSphere(), new BerylliumSphere(),
                                 ^
ArrayOptions.java:27: error: cannot find symbol
    print("a.length = " + a.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:28: error: cannot find symbol
    print("b.length = " + b.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:29: error: cannot find symbol
    print("c.length = " + c.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:30: error: cannot find symbol
    print("d.length = " + d.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:32: error: cannot find symbol
    print("a.length = " + a.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:39: error: cannot find symbol
    print("f: " + Arrays.toString(f));
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:46: error: cannot find symbol
    print("f.length = " + f.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:47: error: cannot find symbol
    print("g.length = " + g.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:48: error: cannot find symbol
    print("h.length = " + h.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:50: error: cannot find symbol
    print("e.length = " + e.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArrayOptions.java:52: error: cannot find symbol
    print("e.length = " + e.length);
    ^
  symbol:   method print(String)
  location: class ArrayOptions
ArraySearching.java:9: error: cannot find symbol
    Generator<Integer> gen =
    ^
  symbol:   class Generator
  location: class ArraySearching
ArraySearching.java:10: error: package RandomGenerator does not exist
      new RandomGenerator.Integer(1000);
                         ^
ArraySearching.java:12: error: cannot find symbol
      Generated.array(new Integer[25], gen));
      ^
  symbol:   variable Generated
  location: class ArraySearching
ArraySearching.java:11: error: cannot find symbol
    int[] a = ConvertTo.primitive(
              ^
  symbol:   variable ConvertTo
  location: class ArraySearching
ArraySearching.java:14: error: cannot find symbol
    print("Sorted array: " + Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class ArraySearching
ArraySearching.java:19: error: cannot find symbol
        print("Location of " + r + " is " + location +
        ^
  symbol:   method print(String)
  location: class ArraySearching
CompType.java:26: error: cannot find symbol
    return new Generator<CompType>() {
               ^
  symbol:   class Generator
  location: class CompType
CompType.java:34: error: cannot find symbol
      Generated.array(new CompType[12], generator());
      ^
  symbol:   variable Generated
  location: class CompType
CompType.java:35: error: cannot find symbol
    print("before sorting:");
    ^
  symbol:   method print(String)
  location: class CompType
CompType.java:36: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class CompType
CompType.java:38: error: cannot find symbol
    print("after sorting:");
    ^
  symbol:   method print(String)
  location: class CompType
CompType.java:39: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class CompType
ComparatorTest.java:15: error: cannot find symbol
    CompType[] a = Generated.array(
                   ^
  symbol:   variable Generated
  location: class ComparatorTest
ComparatorTest.java:17: error: cannot find symbol
    print("before sorting:");
    ^
  symbol:   method print(String)
  location: class ComparatorTest
ComparatorTest.java:18: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class ComparatorTest
ComparatorTest.java:20: error: cannot find symbol
    print("after sorting:");
    ^
  symbol:   method print(String)
  location: class ComparatorTest
ComparatorTest.java:21: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class ComparatorTest
ComparingArrays.java:12: error: cannot find symbol
    print(Arrays.equals(a1, a2));
    ^
  symbol:   method print(boolean)
  location: class ComparingArrays
ComparingArrays.java:14: error: cannot find symbol
    print(Arrays.equals(a1, a2));
    ^
  symbol:   method print(boolean)
  location: class ComparingArrays
ComparingArrays.java:19: error: cannot find symbol
    print(Arrays.equals(s1, s2));
    ^
  symbol:   method print(boolean)
  location: class ComparingArrays
ContainerComparison.java:16: error: cannot find symbol
    print(Arrays.toString(spheres));
    ^
  symbol:   method print(String)
  location: class ContainerComparison
ContainerComparison.java:17: error: cannot find symbol
    print(spheres[4]);
    ^
  symbol:   method print(BerylliumSphere)
  location: class ContainerComparison
ContainerComparison.java:23: error: cannot find symbol
    print(sphereList);
    ^
  symbol:   method print(List<BerylliumSphere>)
  location: class ContainerComparison
ContainerComparison.java:24: error: cannot find symbol
    print(sphereList.get(4));
    ^
  symbol:   method print(BerylliumSphere)
  location: class ContainerComparison
ContainerComparison.java:27: error: cannot find symbol
    print(Arrays.toString(integers));
    ^
  symbol:   method print(String)
  location: class ContainerComparison
ContainerComparison.java:28: error: cannot find symbol
    print(integers[4]);
    ^
  symbol:   method print(int)
  location: class ContainerComparison
ContainerComparison.java:33: error: cannot find symbol
    print(intList);
    ^
  symbol:   method print(List<Integer>)
  location: class ContainerComparison
ContainerComparison.java:34: error: cannot find symbol
    print(intList.get(4));
    ^
  symbol:   method print(Integer)
  location: class ContainerComparison
CopyingArrays.java:12: error: cannot find symbol
    print("i = " + Arrays.toString(i));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:13: error: cannot find symbol
    print("j = " + Arrays.toString(j));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:15: error: cannot find symbol
    print("j = " + Arrays.toString(j));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:19: error: cannot find symbol
    print("k = " + Arrays.toString(k));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:22: error: cannot find symbol
    print("i = " + Arrays.toString(i));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:28: error: cannot find symbol
    print("u = " + Arrays.toString(u));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:29: error: cannot find symbol
    print("v = " + Arrays.toString(v));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
CopyingArrays.java:31: error: cannot find symbol
    print("u = " + Arrays.toString(u));
    ^
  symbol:   method print(String)
  location: class CopyingArrays
FillingArrays.java:19: error: cannot find symbol
    print("a1 = " + Arrays.toString(a1));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:21: error: cannot find symbol
    print("a2 = " + Arrays.toString(a2));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:23: error: cannot find symbol
    print("a3 = " + Arrays.toString(a3));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:25: error: cannot find symbol
    print("a4 = " + Arrays.toString(a4));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:27: error: cannot find symbol
    print("a5 = " + Arrays.toString(a5));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:29: error: cannot find symbol
    print("a6 = " + Arrays.toString(a6));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:31: error: cannot find symbol
    print("a7 = " + Arrays.toString(a7));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:33: error: cannot find symbol
    print("a8 = " + Arrays.toString(a8));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:35: error: cannot find symbol
    print("a9 = " + Arrays.toString(a9));
    ^
  symbol:   method print(String)
  location: class FillingArrays
FillingArrays.java:38: error: cannot find symbol
    print("a9 = " + Arrays.toString(a9));
    ^
  symbol:   method print(String)
  location: class FillingArrays
GeneratorsTest.java:10: error: cannot find symbol
        Generator<?> g = (Generator<?>)type.newInstance();
        ^
  symbol:   class Generator
  location: class GeneratorsTest
GeneratorsTest.java:10: error: cannot find symbol
        Generator<?> g = (Generator<?>)type.newInstance();
                          ^
  symbol:   class Generator
  location: class GeneratorsTest
GeneratorsTest.java:20: error: cannot find symbol
    test(CountingGenerator.class);
         ^
  symbol:   class CountingGenerator
  location: class GeneratorsTest
MultidimensionalObjectArrays.java:6: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
    BerylliumSphere[][] spheres = {
    ^
MultidimensionalObjectArrays.java:7: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere() },
            ^
MultidimensionalObjectArrays.java:7: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere() },
                                   ^
MultidimensionalObjectArrays.java:8: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere(),
            ^
MultidimensionalObjectArrays.java:8: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere(),
                                   ^
MultidimensionalObjectArrays.java:9: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere() },
            ^
MultidimensionalObjectArrays.java:9: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere() },
                                   ^
MultidimensionalObjectArrays.java:10: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere(),
            ^
MultidimensionalObjectArrays.java:10: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
      { new BerylliumSphere(), new BerylliumSphere(),
                                   ^
MultidimensionalObjectArrays.java:11: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere(),
            ^
MultidimensionalObjectArrays.java:11: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere(),
                                   ^
MultidimensionalObjectArrays.java:12: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere(),
            ^
MultidimensionalObjectArrays.java:12: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere(),
                                   ^
MultidimensionalObjectArrays.java:13: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere() },
            ^
MultidimensionalObjectArrays.java:13: warning: auxiliary class BerylliumSphere in ContainerComparison.java should not be accessed from outside its own source file
        new BerylliumSphere(), new BerylliumSphere() },
                                   ^
PrimitiveConversionDemonstration.java:8: error: package CountingGenerator does not exist
        new CountingGenerator.Integer(), 15);
                             ^
PrimitiveConversionDemonstration.java:7: error: cannot find symbol
    Integer[] a = Generated.array(Integer.class,
                  ^
  symbol:   variable Generated
  location: class PrimitiveConversionDemonstration
PrimitiveConversionDemonstration.java:9: error: cannot find symbol
    int[] b = ConvertTo.primitive(a);
              ^
  symbol:   variable ConvertTo
  location: class PrimitiveConversionDemonstration
PrimitiveConversionDemonstration.java:13: error: package CountingGenerator does not exist
        new CountingGenerator.Boolean(), 7));
                             ^
PrimitiveConversionDemonstration.java:12: error: cannot find symbol
      Generated.array(Boolean.class,
      ^
  symbol:   variable Generated
  location: class PrimitiveConversionDemonstration
PrimitiveConversionDemonstration.java:11: error: cannot find symbol
    boolean[] c = ConvertTo.primitive(
                  ^
  symbol:   variable ConvertTo
  location: class PrimitiveConversionDemonstration
RandomGeneratorsTest.java:6: error: cannot find symbol
    GeneratorsTest.test(RandomGenerator.class);
                        ^
  symbol:   class RandomGenerator
  location: class RandomGeneratorsTest
Reverse.java:9: error: cannot find symbol
    CompType[] a = Generated.array(
                   ^
  symbol:   variable Generated
  location: class Reverse
Reverse.java:11: error: cannot find symbol
    print("before sorting:");
    ^
  symbol:   method print(String)
  location: class Reverse
Reverse.java:12: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class Reverse
Reverse.java:14: error: cannot find symbol
    print("after sorting:");
    ^
  symbol:   method print(String)
  location: class Reverse
Reverse.java:15: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class Reverse
StringSorting.java:10: error: package RandomGenerator does not exist
      new RandomGenerator.String(5));
                         ^
StringSorting.java:9: error: cannot find symbol
    String[] sa = Generated.array(new String[20],
                  ^
  symbol:   variable Generated
  location: class StringSorting
100 errors
37 warnings

========================================
./bangbean
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
BangBeanTest.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
BangBeanTest.java:30: error: cannot find symbol
    run(new BangBeanTest(), 400, 500);
    ^
  symbol:   method run(BangBeanTest,int,int)
  location: class BangBeanTest
2 errors
3 warnings

========================================
./concurrency
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ActiveObjectDemo.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CarBuilder.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CloseResource.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CountDownLatchDemo.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DaemonFromFactory.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
DaemonFromFactory.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Daemons.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DaemonsDontRunFinally.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DelayQueueDemo.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ExchangerDemo.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ExchangerDemo.java:7: error: cannot find symbol
  private Generator<T> generator;
          ^
  symbol:   class Generator
  location: class ExchangerProducer<T>
  where T is a type-variable:
    T extends Object declared in class ExchangerProducer
ExchangerDemo.java:11: error: cannot find symbol
  Generator<T> gen, List<T> holder) {
  ^
  symbol:   class Generator
  location: class ExchangerProducer<T>
  where T is a type-variable:
    T extends Object declared in class ExchangerProducer
ExplicitCriticalSection.java:7: warning: auxiliary class PairManager in CriticalSection.java should not be accessed from outside its own source file
class ExplicitPairManager1 extends PairManager {
                                   ^
ExplicitCriticalSection.java:22: warning: auxiliary class PairManager in CriticalSection.java should not be accessed from outside its own source file
class ExplicitPairManager2 extends PairManager {
                                   ^
FastSimulation.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
HorseRace.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Interrupting.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Interrupting2.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
InterruptingIdiom.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Joining.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ListComparisons.java:6: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Tester.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
MapComparisons.java:6: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
MultiLock.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
NIOInterruption.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OrnamentalGarden.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Philosopher.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PipedIO.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PriorityBlockingQueueDemo.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ReaderWriterList.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Restaurant.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SemaphoreDemo.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SimpleDaemons.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SyncObject.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SynchronizationComparisons.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TestBlockingQueues.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ThreadVariations.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ToastOMatic.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ActiveObjectDemo.java:20: error: cannot find symbol
      print("sleep() interrupted");
      ^
  symbol:   method print(String)
  location: class ActiveObjectDemo
ActiveObjectDemo.java:27: error: cannot find symbol
        print("starting " + x + " + " + y);
        ^
  symbol: method print(String)
ActiveObjectDemo.java:37: error: cannot find symbol
        print("starting " + x + " + " + y);
        ^
  symbol: method print(String)
ActiveObjectDemo.java:53: error: cannot find symbol
    print("All asynch calls made");
    ^
  symbol:   method print(String)
  location: class ActiveObjectDemo
ActiveObjectDemo.java:58: error: cannot find symbol
            print(f.get());
            ^
  symbol:   method print(CAP#1)
  location: class ActiveObjectDemo
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Object from capture of ?
CarBuilder.java:39: error: cannot find symbol
        print("ChassisBuilder created " + c);
        ^
  symbol:   method print(String)
  location: class ChassisBuilder
CarBuilder.java:44: error: cannot find symbol
      print("Interrupted: ChassisBuilder");
      ^
  symbol:   method print(String)
  location: class ChassisBuilder
CarBuilder.java:46: error: cannot find symbol
    print("ChassisBuilder off");
    ^
  symbol:   method print(String)
  location: class ChassisBuilder
CarBuilder.java:76: error: cannot find symbol
      print("Exiting Assembler via interrupt");
      ^
  symbol:   method print(String)
  location: class Assembler
CarBuilder.java:81: error: cannot find symbol
    print("Assembler off");
    ^
  symbol:   method print(String)
  location: class Assembler
CarBuilder.java:125: error: cannot find symbol
      print("Exiting " + this + " via interrupt");
      ^
  symbol:   method print(String)
  location: class Robot
CarBuilder.java:130: error: cannot find symbol
    print(this + " off");
    ^
  symbol:   method print(String)
  location: class Robot
CarBuilder.java:91: error: cannot find symbol
        print(carQueue.take());
        ^
  symbol:   method print(Car)
  location: class Reporter
CarBuilder.java:94: error: cannot find symbol
      print("Exiting Reporter via interrupt");
      ^
  symbol:   method print(String)
  location: class Reporter
CarBuilder.java:96: error: cannot find symbol
    print("Reporter off");
    ^
  symbol:   method print(String)
  location: class Reporter
CarBuilder.java:147: error: cannot find symbol
    print(this + " installing engine");
    ^
  symbol:   method print(String)
  location: class EngineRobot
CarBuilder.java:155: error: cannot find symbol
    print(this + " installing DriveTrain");
    ^
  symbol:   method print(String)
  location: class DriveTrainRobot
CarBuilder.java:163: error: cannot find symbol
    print(this + " installing Wheels");
    ^
  symbol:   method print(String)
  location: class WheelRobot
CloseResource.java:16: warning: auxiliary class IOBlocked in Interrupting.java should not be accessed from outside its own source file
    exec.execute(new IOBlocked(socketInput));
                     ^
CloseResource.java:17: warning: auxiliary class IOBlocked in Interrupting.java should not be accessed from outside its own source file
    exec.execute(new IOBlocked(System.in));
                     ^
CloseResource.java:19: error: cannot find symbol
    print("Shutting down all threads");
    ^
  symbol:   method print(String)
  location: class CloseResource
CloseResource.java:22: error: cannot find symbol
    print("Closing " + socketInput.getClass().getName());
    ^
  symbol:   method print(String)
  location: class CloseResource
CloseResource.java:25: error: cannot find symbol
    print("Closing " + System.in.getClass().getName());
    ^
  symbol:   method print(String)
  location: class CloseResource
CountDownLatchDemo.java:25: error: cannot find symbol
    print(this + "completed");
    ^
  symbol:   method print(String)
  location: class TaskPortion
CountDownLatchDemo.java:43: error: cannot find symbol
      print("Latch barrier passed for " + this);
      ^
  symbol:   method print(String)
  location: class WaitingTask
CountDownLatchDemo.java:45: error: cannot find symbol
      print(this + " interrupted");
      ^
  symbol:   method print(String)
  location: class WaitingTask
CountDownLatchDemo.java:63: error: cannot find symbol
    print("Launched all tasks");
    ^
  symbol:   method print(String)
  location: class CountDownLatchDemo
DaemonFromFactory.java:12: error: cannot find symbol
        print(Thread.currentThread() + " " + this);
        ^
  symbol:   method print(String)
  location: class DaemonFromFactory
DaemonFromFactory.java:15: error: cannot find symbol
      print("Interrupted");
      ^
  symbol:   method print(String)
  location: class DaemonFromFactory
DaemonFromFactory.java:20: error: cannot find symbol
      new DaemonThreadFactory());
          ^
  symbol:   class DaemonThreadFactory
  location: class DaemonFromFactory
DaemonFromFactory.java:23: error: cannot find symbol
    print("All daemons started");
    ^
  symbol:   method print(String)
  location: class DaemonFromFactory
Daemons.java:12: error: cannot find symbol
      printnb("DaemonSpawn " + i + " started, ");
      ^
  symbol:   method printnb(String)
  location: class Daemon
Daemons.java:15: error: cannot find symbol
      printnb("t[" + i + "].isDaemon() = " +
      ^
  symbol:   method printnb(String)
  location: class Daemon
Daemons.java:34: error: cannot find symbol
    printnb("d.isDaemon() = " + d.isDaemon() + ", ");
    ^
  symbol:   method printnb(String)
  location: class Daemons
DaemonsDontRunFinally.java:9: error: cannot find symbol
      print("Starting ADaemon");
      ^
  symbol:   method print(String)
  location: class ADaemon
DaemonsDontRunFinally.java:12: error: cannot find symbol
      print("Exiting via InterruptedException");
      ^
  symbol:   method print(String)
  location: class ADaemon
DaemonsDontRunFinally.java:14: error: cannot find symbol
      print("This should always run?");
      ^
  symbol:   method print(String)
  location: class ADaemon
DelayQueueDemo.java:30: error: cannot find symbol
  public void run() { printnb(this + " "); }
                      ^
  symbol:   method printnb(String)
  location: class DelayedTask
DelayQueueDemo.java:46: error: cannot find symbol
        printnb(pt.summary() + " ");
        ^
  symbol:   method printnb(String)
  location: class EndSentinel
DelayQueueDemo.java:48: error: cannot find symbol
      print();
      ^
  symbol:   method print()
  location: class EndSentinel
DelayQueueDemo.java:49: error: cannot find symbol
      print(this + " Calling shutdownNow()");
      ^
  symbol:   method print(String)
  location: class EndSentinel
DelayQueueDemo.java:67: error: cannot find symbol
    print("Finished DelayedTaskConsumer");
    ^
  symbol:   method print(String)
  location: class DelayedTaskConsumer
ExchangerDemo.java:68: error: cannot find symbol
      BasicGenerator.create(Fat.class), producerList));
      ^
  symbol:   variable BasicGenerator
  location: class ExchangerDemo
ExplicitCriticalSection.java:25: warning: auxiliary class Pair in CriticalSection.java should not be accessed from outside its own source file
    Pair temp;
    ^
ExplicitCriticalSection.java:40: warning: auxiliary class PairManager in CriticalSection.java should not be accessed from outside its own source file
    PairManager
    ^
ExplicitCriticalSection.java:40: warning: auxiliary class PairManager in CriticalSection.java should not be accessed from outside its own source file
    PairManager
    ^
FastSimulation.java:34: error: cannot find symbol
            print("Old value changed from " + oldvalue);
            ^
  symbol:   method print(String)
  location: class Evolver
HorseRace.java:52: error: cannot find symbol
        print(s);
        ^
  symbol: method print(StringBuilder)
HorseRace.java:54: error: cannot find symbol
          print(horse.tracks());
          ^
  symbol: method print(String)
HorseRace.java:57: error: cannot find symbol
            print(horse + "won!");
            ^
  symbol: method print(String)
HorseRace.java:64: error: cannot find symbol
          print("barrier-action sleep interrupted");
          ^
  symbol: method print(String)
Interrupting.java:12: error: cannot find symbol
      print("InterruptedException");
      ^
  symbol:   method print(String)
  location: class SleepBlocked
Interrupting.java:14: error: cannot find symbol
    print("Exiting SleepBlocked.run()");
    ^
  symbol:   method print(String)
  location: class SleepBlocked
Interrupting.java:23: error: cannot find symbol
      print("Waiting for read():");
      ^
  symbol:   method print(String)
  location: class IOBlocked
Interrupting.java:27: error: cannot find symbol
        print("Interrupted from blocked I/O");
        ^
  symbol:   method print(String)
  location: class IOBlocked
Interrupting.java:32: error: cannot find symbol
    print("Exiting IOBlocked.run()");
    ^
  symbol:   method print(String)
  location: class IOBlocked
Interrupting.java:49: error: cannot find symbol
    print("Trying to call f()");
    ^
  symbol:   method print(String)
  location: class SynchronizedBlocked
Interrupting.java:51: error: cannot find symbol
    print("Exiting SynchronizedBlocked.run()");
    ^
  symbol:   method print(String)
  location: class SynchronizedBlocked
Interrupting.java:61: error: cannot find symbol
    print("Interrupting " + r.getClass().getName());
    ^
  symbol:   method print(String)
  location: class Interrupting
Interrupting.java:63: error: cannot find symbol
    print("Interrupt sent to " + r.getClass().getName());
    ^
  symbol:   method print(String)
  location: class Interrupting
Interrupting.java:70: error: cannot find symbol
    print("Aborting with System.exit(0)");
    ^
  symbol:   method print(String)
  location: class Interrupting
Interrupting2.java:18: error: cannot find symbol
      print("lock acquired in f()");
      ^
  symbol:   method print(String)
  location: class BlockedMutex
Interrupting2.java:20: error: cannot find symbol
      print("Interrupted from lock acquisition in f()");
      ^
  symbol:   method print(String)
  location: class BlockedMutex
Interrupting2.java:28: error: cannot find symbol
    print("Waiting for f() in BlockedMutex");
    ^
  symbol:   method print(String)
  location: class Blocked2
Interrupting2.java:30: error: cannot find symbol
    print("Broken out of blocked call");
    ^
  symbol:   method print(String)
  location: class Blocked2
InterruptingIdiom.java:11: error: cannot find symbol
    print("NeedsCleanup " + id);
    ^
  symbol:   method print(String)
  location: class NeedsCleanup
InterruptingIdiom.java:14: error: cannot find symbol
    print("Cleaning up " + id);
    ^
  symbol:   method print(String)
  location: class NeedsCleanup
InterruptingIdiom.java:28: error: cannot find symbol
          print("Sleeping");
          ^
  symbol:   method print(String)
  location: class Blocked3
InterruptingIdiom.java:34: error: cannot find symbol
            print("Calculating");
            ^
  symbol:   method print(String)
  location: class Blocked3
SettingDefaultHandler.java:7: warning: auxiliary class MyUncaughtExceptionHandler in CaptureUncaughtException.java should not be accessed from outside its own source file
      new MyUncaughtExceptionHandler());
          ^
100 errors
11 warnings

========================================
./concurrency/restaurant2
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
RestaurantWithQueues.java:4: error: package enumerated.menu does not exist
import enumerated.menu.*;
^
RestaurantWithQueues.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
RestaurantWithQueues.java:15: error: cannot find symbol
  private final Food food;
                ^
  symbol:   class Food
  location: class Order
RestaurantWithQueues.java:16: error: cannot find symbol
  public Order(Customer cust, WaitPerson wp, Food f) {
                                             ^
  symbol:   class Food
  location: class Order
RestaurantWithQueues.java:21: error: cannot find symbol
  public Food item() { return food; }
         ^
  symbol:   class Food
  location: class Order
RestaurantWithQueues.java:85: error: cannot find symbol
  public void placeOrder(Customer cust, Food food) {
                                        ^
  symbol:   class Food
  location: class WaitPerson
RestaurantWithQueues.java:34: error: cannot find symbol
  private final Food food;
                ^
  symbol:   class Food
  location: class Plate
RestaurantWithQueues.java:35: error: cannot find symbol
  public Plate(Order ord, Food f) {
                          ^
  symbol:   class Food
  location: class Plate
RestaurantWithQueues.java:40: error: cannot find symbol
  public Food getFood() { return food; }
         ^
  symbol:   class Food
  location: class Plate
RestaurantWithQueues.java:59: error: cannot find symbol
    for(Course course : Course.values()) {
                        ^
  symbol:   variable Course
  location: class Customer
RestaurantWithQueues.java:59: error: cannot find symbol
    for(Course course : Course.values()) {
        ^
  symbol:   class Course
  location: class Customer
RestaurantWithQueues.java:60: error: cannot find symbol
      Food food = course.randomSelection();
      ^
  symbol:   class Food
  location: class Customer
RestaurantWithQueues.java:64: error: cannot find symbol
        print(this + "eating " + placeSetting.take());
        ^
  symbol:   method print(String)
  location: class Customer
RestaurantWithQueues.java:71: error: cannot find symbol
    print(this + "finished meal, leaving");
    ^
  symbol:   method print(String)
  location: class Customer
RestaurantWithQueues.java:91: error: cannot find symbol
      print(this + " placeOrder interrupted");
      ^
  symbol:   method print(String)
  location: class WaitPerson
RestaurantWithQueues.java:99: error: cannot find symbol
        print(this + "received " + plate +
        ^
  symbol:   method print(String)
  location: class WaitPerson
RestaurantWithQueues.java:105: error: cannot find symbol
      print(this + " interrupted");
      ^
  symbol:   method print(String)
  location: class WaitPerson
RestaurantWithQueues.java:107: error: cannot find symbol
    print(this + " off duty");
    ^
  symbol:   method print(String)
  location: class WaitPerson
RestaurantWithQueues.java:172: error: cannot find symbol
      print("Restaurant interrupted");
      ^
  symbol:   method print(String)
  location: class Restaurant
RestaurantWithQueues.java:174: error: cannot find symbol
    print("Restaurant closing");
    ^
  symbol:   method print(String)
  location: class Restaurant
RestaurantWithQueues.java:125: error: cannot find symbol
        Food requestedItem = order.item();
        ^
  symbol:   class Food
  location: class Chef
RestaurantWithQueues.java:132: error: cannot find symbol
      print(this + " interrupted");
      ^
  symbol:   method print(String)
  location: class Chef
RestaurantWithQueues.java:134: error: cannot find symbol
    print(this + " off duty");
    ^
  symbol:   method print(String)
  location: class Chef
RestaurantWithQueues.java:186: error: cannot find symbol
      print("Press 'Enter' to quit");
      ^
  symbol:   method print(String)
  location: class RestaurantWithQueues
24 errors
3 warnings

========================================
./concurrency/waxomatic
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
WaxOMatic.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
WaxOMatic.java:35: error: cannot find symbol
        printnb("Wax On! ");
        ^
  symbol:   method printnb(String)
  location: class WaxOn
WaxOMatic.java:41: error: cannot find symbol
      print("Exiting via interrupt");
      ^
  symbol:   method print(String)
  location: class WaxOn
WaxOMatic.java:43: error: cannot find symbol
    print("Ending Wax On task");
    ^
  symbol:   method print(String)
  location: class WaxOn
WaxOMatic.java:54: error: cannot find symbol
        printnb("Wax Off! ");
        ^
  symbol:   method printnb(String)
  location: class WaxOff
WaxOMatic.java:59: error: cannot find symbol
      print("Exiting via interrupt");
      ^
  symbol:   method print(String)
  location: class WaxOff
WaxOMatic.java:61: error: cannot find symbol
    print("Ending Wax Off task");
    ^
  symbol:   method print(String)
  location: class WaxOff
7 errors
3 warnings

========================================
./concurrency/waxomatic2
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
WaxOMatic2.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
WaxOMatic2.java:56: error: cannot find symbol
        printnb("Wax On! ");
        ^
  symbol:   method printnb(String)
  location: class WaxOn
WaxOMatic2.java:62: error: cannot find symbol
      print("Exiting via interrupt");
      ^
  symbol:   method print(String)
  location: class WaxOn
WaxOMatic2.java:64: error: cannot find symbol
    print("Ending Wax On task");
    ^
  symbol:   method print(String)
  location: class WaxOn
WaxOMatic2.java:75: error: cannot find symbol
        printnb("Wax Off! ");
        ^
  symbol:   method printnb(String)
  location: class WaxOff
WaxOMatic2.java:80: error: cannot find symbol
      print("Exiting via interrupt");
      ^
  symbol:   method print(String)
  location: class WaxOff
WaxOMatic2.java:82: error: cannot find symbol
    print("Ending Wax Off task");
    ^
  symbol:   method print(String)
  location: class WaxOff
7 errors
3 warnings

========================================
./containers
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AssociativeArray.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Bits.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CollectionDataGeneration.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CollectionDataTest.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CollectionDataTest.java:5: error: cannot find symbol
class Government implements Generator<String> {
                            ^
  symbol: class Generator
CollectionMethods.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CollectionMethods.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CountedString.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DequeTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
DequeTest.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DequeTest.java:6: error: cannot find symbol
  static void fillTest(Deque<Integer> deque) {
                       ^
  symbol:   class Deque
  location: class DequeTest
Enumerations.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
IndividualTest.java:2: error: package holding does not exist
import holding.MapOfList;
              ^
IndividualTest.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
LinkedHashMapDemo.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
LinkedHashMapDemo.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ListPerformance.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ListSortSearch.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Lists.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Lists.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MapDataTest.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
MapDataTest.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MapDataTest.java:6: error: cannot find symbol
class Letters implements Generator<Pair<Integer,String>>,
                         ^
  symbol: class Generator
MapDataTest.java:6: error: cannot find symbol
class Letters implements Generator<Pair<Integer,String>>,
                                   ^
  symbol: class Pair
MapDataTest.java:11: error: cannot find symbol
  public Pair<Integer,String> next() {
         ^
  symbol:   class Pair
  location: class Letters
Maps.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Maps.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
QueueBehavior.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
QueueBehavior.java:9: error: cannot find symbol
  static <T> void test(Queue<T> queue, Generator<T> gen) {
                                       ^
  symbol:   class Generator
  location: class QueueBehavior
QueueBehavior.java:16: error: cannot find symbol
  static class Gen implements Generator<String> {
                              ^
  symbol:   class Generator
  location: class QueueBehavior
RandomBounds.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ReadOnly.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ReadOnly.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SimpleHashMap.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
SlowMap.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
SortedMapDemo.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
SortedMapDemo.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SortedSetDemo.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SpringDetector.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Stacks.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Utilities.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AssociativeArray.java:46: error: cannot find symbol
      print("Too many objects!");
      ^
  symbol:   method print(String)
  location: class AssociativeArray<K,V>
  where K,V are type-variables:
    K extends Object declared in class AssociativeArray
    V extends Object declared in class AssociativeArray
AssociativeArray.java:48: error: cannot find symbol
    print(map);
    ^
  symbol:   method print(AssociativeArray<String,String>)
  location: class AssociativeArray<K,V>
  where K,V are type-variables:
    K extends Object declared in class AssociativeArray
    V extends Object declared in class AssociativeArray
AssociativeArray.java:49: error: cannot find symbol
    print(map.get("ocean"));
    ^
  symbol:   method print(String)
  location: class AssociativeArray<K,V>
  where K,V are type-variables:
    K extends Object declared in class AssociativeArray
    V extends Object declared in class AssociativeArray
Bits.java:8: error: cannot find symbol
    print("bits: " + b);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:12: error: cannot find symbol
    print("bit pattern: " + bbits);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:24: error: cannot find symbol
    print("byte value: " + bt);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:34: error: cannot find symbol
    print("short value: " + st);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:44: error: cannot find symbol
    print("int value: " + it);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:50: error: cannot find symbol
    print("set bit 127: " + b127);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:53: error: cannot find symbol
    print("set bit 255: " + b255);
    ^
  symbol:   method print(String)
  location: class Bits
Bits.java:57: error: cannot find symbol
    print("set bit 1023: " + b1023);
    ^
  symbol:   method print(String)
  location: class Bits
CollectionDataGeneration.java:10: error: package RandomGenerator does not exist
        new RandomGenerator.String(9), 10)));
                           ^
CollectionDataGeneration.java:9: error: cannot find symbol
      CollectionData.list( // Convenience method
      ^
  symbol:   variable CollectionData
  location: class CollectionDataGeneration
CollectionDataGeneration.java:12: error: cannot find symbol
      new CollectionData<Integer>(
          ^
  symbol:   class CollectionData
  location: class CollectionDataGeneration
CollectionDataGeneration.java:13: error: package RandomGenerator does not exist
        new RandomGenerator.Integer(), 10)));
                           ^
CollectionDataTest.java:16: error: cannot find symbol
      new CollectionData<String>(new Government(), 15));
          ^
  symbol:   class CollectionData
  location: class CollectionDataTest
CollectionDataTest.java:18: error: cannot find symbol
    set.addAll(CollectionData.list(new Government(), 15));
               ^
  symbol:   variable CollectionData
  location: class CollectionDataTest
CollectionMethods.java:10: error: cannot find symbol
    c.addAll(Countries.names(6));
             ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:13: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:21: error: cannot find symbol
    print("Collections.max(c) = " + Collections.max(c));
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CollectionMethods.java:22: error: cannot find symbol
    print("Collections.min(c) = " + Collections.min(c));
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CollectionMethods.java:25: error: cannot find symbol
    c2.addAll(Countries.names(6));
              ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:27: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:28: error: cannot find symbol
    c.remove(Countries.DATA[0][0]);
             ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:29: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:30: error: cannot find symbol
    c.remove(Countries.DATA[1][0]);
             ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:31: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:35: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:37: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:39: error: cannot find symbol
    String val = Countries.DATA[3][0];
                 ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:40: error: cannot find symbol
    print("c.contains(" + val  + ") = " + c.contains(val));
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CollectionMethods.java:42: error: cannot find symbol
    print("c.containsAll(c2) = " + c.containsAll(c2));
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CollectionMethods.java:48: error: cannot find symbol
    print(c2);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:52: error: cannot find symbol
    print("c2.isEmpty() = " +  c2.isEmpty());
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CollectionMethods.java:54: error: cannot find symbol
    c.addAll(Countries.names(6));
             ^
  symbol:   variable Countries
  location: class CollectionMethods
CollectionMethods.java:55: error: cannot find symbol
    print(c);
    ^
  symbol:   method print(Collection<String>)
  location: class CollectionMethods
CollectionMethods.java:57: error: cannot find symbol
    print("after c.clear():" + c);
    ^
  symbol:   method print(String)
  location: class CollectionMethods
CountedString.java:46: error: cannot find symbol
    print(map);
    ^
  symbol:   method print(Map<CountedString,Integer>)
  location: class CountedString
CountedString.java:48: error: cannot find symbol
      print("Looking up " + cstring);
      ^
  symbol:   method print(String)
  location: class CountedString
CountedString.java:49: error: cannot find symbol
      print(map.get(cstring));
      ^
  symbol:   method print(Integer)
  location: class CountedString
DequeTest.java:13: error: cannot find symbol
    Deque<Integer> di = new Deque<Integer>();
    ^
  symbol:   class Deque
  location: class DequeTest
DequeTest.java:13: error: cannot find symbol
    Deque<Integer> di = new Deque<Integer>();
                            ^
  symbol:   class Deque
  location: class DequeTest
DequeTest.java:18: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class DequeTest
Enumerations.java:9: error: cannot find symbol
      new Vector<String>(Countries.names(10));
                         ^
  symbol:   variable Countries
  location: class Enumerations
IndividualTest.java:8: error: cannot find symbol
    Set<Individual> pets = new TreeSet<Individual>();
        ^
  symbol:   class Individual
  location: class IndividualTest
IndividualTest.java:8: error: cannot find symbol
    Set<Individual> pets = new TreeSet<Individual>();
                                       ^
  symbol:   class Individual
  location: class IndividualTest
IndividualTest.java:10: error: package MapOfList does not exist
        MapOfList.petPeople.values())
                 ^
IndividualTest.java:9: error: cannot find symbol
    for(List<? extends Pet> lp :
                       ^
  symbol:   class Pet
  location: class IndividualTest
IndividualTest.java:11: error: cannot find symbol
      for(Pet p : lp)
          ^
  symbol:   class Pet
  location: class IndividualTest
LinkedHashMapDemo.java:11: error: cannot find symbol
        new CountingMapData(9));
            ^
  symbol:   class CountingMapData
  location: class LinkedHashMapDemo
LinkedHashMapDemo.java:12: error: cannot find symbol
    print(linkedMap);
    ^
  symbol:   method print(LinkedHashMap<Integer,String>)
  location: class LinkedHashMapDemo
LinkedHashMapDemo.java:16: error: cannot find symbol
    linkedMap.putAll(new CountingMapData(9));
                         ^
  symbol:   class CountingMapData
  location: class LinkedHashMapDemo
LinkedHashMapDemo.java:17: error: cannot find symbol
    print(linkedMap);
    ^
  symbol:   method print(LinkedHashMap<Integer,String>)
  location: class LinkedHashMapDemo
LinkedHashMapDemo.java:20: error: cannot find symbol
    print(linkedMap);
    ^
  symbol:   method print(LinkedHashMap<Integer,String>)
  location: class LinkedHashMapDemo
LinkedHashMapDemo.java:22: error: cannot find symbol
    print(linkedMap);
    ^
  symbol:   method print(LinkedHashMap<Integer,String>)
  location: class LinkedHashMapDemo
ListPerformance.java:69: error: cannot find symbol
          list.addAll(new CountingIntegerList(size));
                          ^
  symbol: class CountingIntegerList
ListPerformance.java:108: error: cannot find symbol
            list.addAll(new CountingIntegerList(size));
                            ^
  symbol: class CountingIntegerList
ListPerformance.java:121: error: cannot find symbol
          list.addAll(new CountingIntegerList(size));
                          ^
  symbol: class CountingIntegerList
Tester.java:60: warning: [rawtypes] found raw type: Test
    for(Test test : tests)
        ^
  missing type arguments for generic class Test<C>
  where C is a type-variable:
    C extends Object declared in class Test
ListPerformance.java:137: error: cannot find symbol
      container.addAll(new CountingIntegerList(size));
                           ^
  symbol:   class CountingIntegerList
  location: class ListTester
MapEntry.java:25: warning: [rawtypes] found raw type: MapEntry
    MapEntry me = (MapEntry)o;
    ^
  missing type arguments for generic class MapEntry<K,V>
  where K,V are type-variables:
    K extends Object declared in class MapEntry
    V extends Object declared in class MapEntry
MapPerformance.java:36: warning: [rawtypes] found raw type: Iterator
          Iterator it = map.entrySet().iterator();
          ^
  missing type arguments for generic class Iterator<E>
  where E is a type-variable:
    E extends Object declared in interface Iterator
SimpleHashMap.java:14: warning: [rawtypes] found raw type: LinkedList
    new LinkedList[SIZE];
        ^
  missing type arguments for generic class LinkedList<E>
  where E is a type-variable:
    E extends Object declared in class LinkedList
TypesForSets.java:5: warning: [overrides] Class SetType overrides equals, but neither it nor any superclass overrides hashCode method
class SetType {
^
100 errors
8 warnings

========================================
./control
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
BreakAndContinue.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Range.*;
                               ^
ForEachInt.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Range.*;
                               ^
ForEachInt.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
IfElse.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
IfElse2.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
LabeledFor.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
LabeledWhile.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
VowelsAndConsonants.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
BreakAndContinue.java:14: error: cannot find symbol
    for(int i : range(100)) {
                ^
  symbol:   method range(int)
  location: class BreakAndContinue
ForEachInt.java:7: error: cannot find symbol
    for(int i : range(10)) // 0..9
                ^
  symbol:   method range(int)
  location: class ForEachInt
ForEachInt.java:8: error: cannot find symbol
      printnb(i + " ");
      ^
  symbol:   method printnb(String)
  location: class ForEachInt
ForEachInt.java:9: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ForEachInt
ForEachInt.java:10: error: cannot find symbol
    for(int i : range(5, 10)) // 5..9
                ^
  symbol:   method range(int,int)
  location: class ForEachInt
ForEachInt.java:11: error: cannot find symbol
      printnb(i + " ");
      ^
  symbol:   method printnb(String)
  location: class ForEachInt
ForEachInt.java:12: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ForEachInt
ForEachInt.java:13: error: cannot find symbol
    for(int i : range(5, 20, 3)) // 5..20 step 3
                ^
  symbol:   method range(int,int,int)
  location: class ForEachInt
ForEachInt.java:14: error: cannot find symbol
      printnb(i + " ");
      ^
  symbol:   method printnb(String)
  location: class ForEachInt
ForEachInt.java:15: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ForEachInt
IfElse.java:16: error: cannot find symbol
    print(result);
    ^
  symbol:   method print(int)
  location: class IfElse
IfElse.java:18: error: cannot find symbol
    print(result);
    ^
  symbol:   method print(int)
  location: class IfElse
IfElse.java:20: error: cannot find symbol
    print(result);
    ^
  symbol:   method print(int)
  location: class IfElse
IfElse2.java:14: error: cannot find symbol
    print(test(10, 5));
    ^
  symbol:   method print(int)
  location: class IfElse2
IfElse2.java:15: error: cannot find symbol
    print(test(5, 10));
    ^
  symbol:   method print(int)
  location: class IfElse2
IfElse2.java:16: error: cannot find symbol
    print(test(5, 5));
    ^
  symbol:   method print(int)
  location: class IfElse2
LabeledFor.java:12: error: cannot find symbol
        print("i = " + i);
        ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledFor.java:14: error: cannot find symbol
          print("continue");
          ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledFor.java:18: error: cannot find symbol
          print("break");
          ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledFor.java:24: error: cannot find symbol
          print("continue outer");
          ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledFor.java:30: error: cannot find symbol
          print("break outer");
          ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledFor.java:35: error: cannot find symbol
            print("continue inner");
            ^
  symbol:   method print(String)
  location: class LabeledFor
LabeledWhile.java:10: error: cannot find symbol
      print("Outer while loop");
      ^
  symbol:   method print(String)
  location: class LabeledWhile
LabeledWhile.java:13: error: cannot find symbol
        print("i = " + i);
        ^
  symbol:   method print(String)
  location: class LabeledWhile
LabeledWhile.java:15: error: cannot find symbol
          print("continue");
          ^
  symbol:   method print(String)
  location: class LabeledWhile
LabeledWhile.java:19: error: cannot find symbol
          print("continue outer");
          ^
  symbol:   method print(String)
  location: class LabeledWhile
LabeledWhile.java:23: error: cannot find symbol
          print("break");
          ^
  symbol:   method print(String)
  location: class LabeledWhile
LabeledWhile.java:27: error: cannot find symbol
          print("break outer");
          ^
  symbol:   method print(String)
  location: class LabeledWhile
VowelsAndConsonants.java:11: error: cannot find symbol
      printnb((char)c + ", " + c + ": ");
      ^
  symbol:   method printnb(String)
  location: class VowelsAndConsonants
VowelsAndConsonants.java:17: error: cannot find symbol
        case 'u': print("vowel");
                  ^
  symbol:   method print(String)
  location: class VowelsAndConsonants
VowelsAndConsonants.java:20: error: cannot find symbol
        case 'w': print("Sometimes a vowel");
                  ^
  symbol:   method print(String)
  location: class VowelsAndConsonants
VowelsAndConsonants.java:22: error: cannot find symbol
        default:  print("consonant");
                  ^
  symbol:   method print(String)
  location: class VowelsAndConsonants
40 errors
3 warnings

========================================
./enumerated
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
CarWash.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
EnumClass.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
EnumMaps.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
EnumSets.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
NotClasses.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OverrideConstantSpecific.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OzWitch.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PostOffice.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PostOffice.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
RandomTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Reflection.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Reflection.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
RoShamBo.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
SecurityCategory.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TrafficLight.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
VendingMachine.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
VendingMachine.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
VendingMachine.java:98: error: cannot find symbol
  static void run(Generator<Input> gen) {
                  ^
  symbol:   class Generator
  location: class VendingMachine
VendingMachine.java:115: error: cannot find symbol
class RandomInputGenerator implements Generator<Input> {
                                      ^
  symbol: class Generator
VendingMachine.java:120: error: cannot find symbol
class FileInputGenerator implements Generator<Input> {
                                    ^
  symbol: class Generator
CarWash.java:8: error: cannot find symbol
      void action() { print("Spraying the underbody"); }
                      ^
  symbol: method print(String)
CarWash.java:11: error: cannot find symbol
      void action() { print("Washing the wheels"); }
                      ^
  symbol: method print(String)
CarWash.java:14: error: cannot find symbol
      void action() { print("Loosening the dirt"); }
                      ^
  symbol: method print(String)
CarWash.java:17: error: cannot find symbol
      void action() { print("The basic wash"); }
                      ^
  symbol: method print(String)
CarWash.java:20: error: cannot find symbol
      void action() { print("Applying hot wax"); }
                      ^
  symbol: method print(String)
CarWash.java:23: error: cannot find symbol
      void action() { print("Rinsing"); }
                      ^
  symbol: method print(String)
CarWash.java:26: error: cannot find symbol
      void action() { print("Blowing dry"); }
                      ^
  symbol: method print(String)
CarWash.java:40: error: cannot find symbol
    print(wash);
    ^
  symbol:   method print(CarWash)
  location: class CarWash
CarWash.java:47: error: cannot find symbol
    print(wash);
    ^
  symbol:   method print(CarWash)
  location: class CarWash
EnumClass.java:10: error: cannot find symbol
      print(s + " ordinal: " + s.ordinal());
      ^
  symbol:   method print(String)
  location: class EnumClass
EnumClass.java:11: error: cannot find symbol
      printnb(s.compareTo(Shrubbery.CRAWLING) + " ");
      ^
  symbol:   method printnb(String)
  location: class EnumClass
EnumClass.java:12: error: cannot find symbol
      printnb(s.equals(Shrubbery.CRAWLING) + " ");
      ^
  symbol:   method printnb(String)
  location: class EnumClass
EnumClass.java:13: error: cannot find symbol
      print(s == Shrubbery.CRAWLING);
      ^
  symbol:   method print(boolean)
  location: class EnumClass
EnumClass.java:14: error: cannot find symbol
      print(s.getDeclaringClass());
      ^
  symbol:   method print(Class<Shrubbery>)
  location: class EnumClass
EnumClass.java:15: error: cannot find symbol
      print(s.name());
      ^
  symbol:   method print(String)
  location: class EnumClass
EnumClass.java:16: error: cannot find symbol
      print("----------------------");
      ^
  symbol:   method print(String)
  location: class EnumClass
EnumClass.java:21: error: cannot find symbol
      print(shrub);
      ^
  symbol:   method print(Shrubbery)
  location: class EnumClass
EnumMaps.java:15: error: cannot find symbol
      public void action() { print("Kitchen fire!"); }
                             ^
  symbol: method print(String)
EnumMaps.java:18: error: cannot find symbol
      public void action() { print("Bathroom alert!"); }
                             ^
  symbol: method print(String)
EnumMaps.java:21: error: cannot find symbol
      printnb(e.getKey() + ": ");
      ^
  symbol:   method printnb(String)
  location: class EnumMaps
EnumMaps.java:27: error: cannot find symbol
      print(e);
      ^
  symbol:   method print(Exception)
  location: class EnumMaps
EnumSets.java:13: error: cannot find symbol
    print(points);
    ^
  symbol:   method print(EnumSet<AlarmPoints>)
  location: class EnumSets
EnumSets.java:15: error: cannot find symbol
    print(points);
    ^
  symbol:   method print(EnumSet<AlarmPoints>)
  location: class EnumSets
EnumSets.java:18: error: cannot find symbol
    print(points);
    ^
  symbol:   method print(EnumSet<AlarmPoints>)
  location: class EnumSets
EnumSets.java:20: error: cannot find symbol
    print(points);
    ^
  symbol:   method print(EnumSet<AlarmPoints>)
  location: class EnumSets
EnumSets.java:22: error: cannot find symbol
    print(points);
    ^
  symbol:   method print(EnumSet<AlarmPoints>)
  location: class EnumSets
NotClasses.java:6: error: cannot find symbol
  WINKEN { void behavior() { print("Behavior1"); } },
                             ^
  symbol: method print(String)
NotClasses.java:7: error: cannot find symbol
  BLINKEN { void behavior() { print("Behavior2"); } },
                              ^
  symbol: method print(String)
NotClasses.java:8: error: cannot find symbol
  NOD { void behavior() { print("Behavior3"); } };
                          ^
  symbol: method print(String)
OverrideConstantSpecific.java:7: error: cannot find symbol
    void f() { print("Overridden method"); }
               ^
  symbol: method print(String)
OverrideConstantSpecific.java:9: error: cannot find symbol
  void f() { print("default behavior"); }
             ^
  symbol:   method print(String)
  location: class OverrideConstantSpecific
OverrideConstantSpecific.java:12: error: cannot find symbol
      printnb(ocs + ": ");
      ^
  symbol:   method printnb(String)
  location: class OverrideConstantSpecific
OzWitch.java:20: error: cannot find symbol
      print(witch + ": " + witch.getDescription());
      ^
  symbol:   method print(String)
  location: class OzWitch
PostOffice.java:33: error: cannot find symbol
    m.generalDelivery= Enums.random(GeneralDelivery.class);
                       ^
  symbol:   variable Enums
  location: class Mail
PostOffice.java:34: error: cannot find symbol
    m.scannability = Enums.random(Scannability.class);
                     ^
  symbol:   variable Enums
  location: class Mail
PostOffice.java:35: error: cannot find symbol
    m.readability = Enums.random(Readability.class);
                    ^
  symbol:   variable Enums
  location: class Mail
PostOffice.java:36: error: cannot find symbol
    m.address = Enums.random(Address.class);
                ^
  symbol:   variable Enums
  location: class Mail
PostOffice.java:37: error: cannot find symbol
    m.returnAddress = Enums.random(ReturnAddress.class);
                      ^
  symbol:   variable Enums
  location: class Mail
PostOffice.java:62: error: cannot find symbol
            print("Using general delivery for " + m);
            ^
  symbol: method print(String)
PostOffice.java:76: error: cannot find symbol
                print("Delivering "+ m + " automatically");
                ^
  symbol: method print(String)
PostOffice.java:90: error: cannot find symbol
                print("Delivering " + m + " normally");
                ^
  symbol: method print(String)
PostOffice.java:101: error: cannot find symbol
            print("Returning " + m + " to sender");
            ^
  symbol: method print(String)
PostOffice.java:112: error: cannot find symbol
    print(m + " is a dead letter");
    ^
  symbol:   method print(String)
  location: class PostOffice
PostOffice.java:116: error: cannot find symbol
      print(mail.details());
      ^
  symbol:   method print(String)
  location: class PostOffice
PostOffice.java:118: error: cannot find symbol
      print("*****");
      ^
  symbol:   method print(String)
  location: class PostOffice
RandomTest.java:10: error: cannot find symbol
      System.out.print(Enums.random(Activity.class) + " ");
                       ^
  symbol:   variable Enums
  location: class RandomTest
Reflection.java:12: error: cannot find symbol
    print("----- Analyzing " + enumClass + " -----");
    ^
  symbol:   method print(String)
  location: class Reflection
Reflection.java:13: error: cannot find symbol
    print("Interfaces:");
    ^
  symbol:   method print(String)
  location: class Reflection
Reflection.java:15: error: cannot find symbol
      print(t);
      ^
  symbol:   method print(Type)
  location: class Reflection
Reflection.java:16: error: cannot find symbol
    print("Base: " + enumClass.getSuperclass());
    ^
  symbol:   method print(String)
  location: class Reflection
Reflection.java:17: error: cannot find symbol
    print("Methods: ");
    ^
  symbol:   method print(String)
  location: class Reflection
Reflection.java:21: error: cannot find symbol
    print(methods);
    ^
  symbol:   method print(Set<String>)
  location: class Reflection
Reflection.java:27: error: cannot find symbol
    print("Explore.containsAll(Enum)? " +
    ^
  symbol:   method print(String)
  location: class Reflection
Reflection.java:29: error: cannot find symbol
    printnb("Explore.removeAll(Enum): ");
    ^
  symbol:   method printnb(String)
  location: class Reflection
Reflection.java:31: error: cannot find symbol
    print(exploreMethods);
    ^
  symbol:   method print(Set<String>)
  location: class Reflection
Reflection.java:33: error: cannot find symbol
    OSExecute.command("javap Explore");
    ^
  symbol:   variable OSExecute
  location: class Reflection
RoShamBo.java:16: error: cannot find symbol
        Enums.random(rsbClass),Enums.random(rsbClass));
        ^
  symbol:   variable Enums
  location: class RoShamBo
RoShamBo.java:16: error: cannot find symbol
        Enums.random(rsbClass),Enums.random(rsbClass));
                               ^
  symbol:   variable Enums
  location: class RoShamBo
SecurityCategory.java:16: error: cannot find symbol
    return Enums.random(values);
           ^
  symbol:   variable Enums
  location: class SecurityCategory
SecurityCategory.java:21: error: cannot find symbol
        Enums.random(SecurityCategory.class);
        ^
  symbol:   variable Enums
  location: class SecurityCategory
TrafficLight.java:28: error: cannot find symbol
      print(t);
      ^
  symbol:   method print(TrafficLight)
  location: class TrafficLight
UpcastEnum.java:9: warning: [rawtypes] found raw type: Enum
    Enum e = Search.HITHER; // Upcast
    ^
  missing type arguments for generic class Enum<E>
  where E is a type-variable:
    E extends Enum<E> declared in class Enum
UpcastEnum.java:11: warning: [rawtypes] found raw type: Enum
    for(Enum en : e.getClass().getEnumConstants())
        ^
  missing type arguments for generic class Enum<E>
  where E is a type-variable:
    E extends Enum<E> declared in class Enum
VendingMachine.java:56: error: cannot find symbol
              print("Insufficient money for " + selection);
              ^
  symbol: method print(String)
VendingMachine.java:70: error: cannot find symbol
        print("here is your " + selection);
        ^
  symbol: method print(String)
VendingMachine.java:78: error: cannot find symbol
          print("Your change: " + amount);
          ^
  symbol: method print(String)
VendingMachine.java:84: error: cannot find symbol
    TERMINAL { void output() { print("Halted"); } };
                               ^
  symbol: method print(String)
VendingMachine.java:96: error: cannot find symbol
    void output() { print(amount); }
                    ^
  symbol:   method print(int)
  location: class State
VendingMachine.java:107: error: cannot find symbol
    Generator<Input> gen = new RandomInputGenerator();
    ^
  symbol:   class Generator
  location: class VendingMachine
VendingMachine.java:123: error: cannot find symbol
    input = new TextFile(fileName, ";").iterator();
                ^
  symbol:   class TextFile
  location: class FileInputGenerator
88 errors
5 warnings

========================================
./enumerated/cartoons
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
EnumImplementation.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
EnumImplementation.java:8: error: cannot find symbol
implements Generator<CartoonCharacter> {
           ^
  symbol: class Generator
EnumImplementation.java:17: error: cannot find symbol
  public static <T> void printNext(Generator<T> rg) {
                                   ^
  symbol:   class Generator
  location: class EnumImplementation
3 errors
3 warnings

========================================
./enumerated/menu
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Course.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Meal2.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Course.java:15: error: cannot find symbol
    return Enums.random(values);
           ^
  symbol:   variable Enums
  location: class Course
Meal2.java:32: error: cannot find symbol
    return Enums.random(values);
           ^
  symbol:   variable Enums
  location: class Meal2
4 errors
3 warnings

========================================
./exceptions
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AlwaysFinally.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DynamicFields.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ExceptionMethods.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ExtraFeatures.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MultipleReturns.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Switch.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TurnOffChecking.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AlwaysFinally.java:9: error: cannot find symbol
    print("Entering first try block");
    ^
  symbol:   method print(String)
  location: class AlwaysFinally
AlwaysFinally.java:11: error: cannot find symbol
      print("Entering second try block");
      ^
  symbol:   method print(String)
  location: class AlwaysFinally
AlwaysFinally.java:15: error: cannot find symbol
        print("finally in 2nd try block");
        ^
  symbol:   method print(String)
  location: class AlwaysFinally
DynamicFields.java:84: error: cannot find symbol
    print(df);
    ^
  symbol:   method print(DynamicFields)
  location: class DynamicFields
DynamicFields.java:89: error: cannot find symbol
      print(df);
      ^
  symbol:   method print(DynamicFields)
  location: class DynamicFields
DynamicFields.java:92: error: cannot find symbol
      print("df: " + df);
      ^
  symbol:   method print(String)
  location: class DynamicFields
DynamicFields.java:93: error: cannot find symbol
      print("df.getField(\"d\") : " + df.getField("d"));
      ^
  symbol:   method print(String)
  location: class DynamicFields
ExceptionMethods.java:10: error: cannot find symbol
      print("Caught Exception");
      ^
  symbol:   method print(String)
  location: class ExceptionMethods
ExceptionMethods.java:11: error: cannot find symbol
      print("getMessage():" + e.getMessage());
      ^
  symbol:   method print(String)
  location: class ExceptionMethods
ExceptionMethods.java:12: error: cannot find symbol
      print("getLocalizedMessage():" +
      ^
  symbol:   method print(String)
  location: class ExceptionMethods
ExceptionMethods.java:14: error: cannot find symbol
      print("toString():" + e);
      ^
  symbol:   method print(String)
  location: class ExceptionMethods
ExceptionMethods.java:15: error: cannot find symbol
      print("printStackTrace():");
      ^
  symbol:   method print(String)
  location: class ExceptionMethods
ExtraFeatures.java:21: error: cannot find symbol
    print("Throwing MyException2 from f()");
    ^
  symbol:   method print(String)
  location: class ExtraFeatures
ExtraFeatures.java:25: error: cannot find symbol
    print("Throwing MyException2 from g()");
    ^
  symbol:   method print(String)
  location: class ExtraFeatures
ExtraFeatures.java:29: error: cannot find symbol
    print("Throwing MyException2 from h()");
    ^
  symbol:   method print(String)
  location: class ExtraFeatures
MultipleReturns.java:6: error: cannot find symbol
    print("Initialization that requires cleanup");
    ^
  symbol:   method print(String)
  location: class MultipleReturns
MultipleReturns.java:8: error: cannot find symbol
      print("Point 1");
      ^
  symbol:   method print(String)
  location: class MultipleReturns
MultipleReturns.java:10: error: cannot find symbol
      print("Point 2");
      ^
  symbol:   method print(String)
  location: class MultipleReturns
MultipleReturns.java:12: error: cannot find symbol
      print("Point 3");
      ^
  symbol:   method print(String)
  location: class MultipleReturns
MultipleReturns.java:14: error: cannot find symbol
      print("End");
      ^
  symbol:   method print(String)
  location: class MultipleReturns
MultipleReturns.java:17: error: cannot find symbol
      print("Performing cleanup");
      ^
  symbol:   method print(String)
  location: class MultipleReturns
Switch.java:7: error: cannot find symbol
  public void on() { state = true; print(this); }
                                   ^
  symbol:   method print(Switch)
  location: class Switch
Switch.java:8: error: cannot find symbol
  public void off() { state = false; print(this); }
                                     ^
  symbol:   method print(Switch)
  location: class Switch
TurnOffChecking.java:37: error: cannot find symbol
          print("SomeOtherException: " + e);
          ^
  symbol:   method print(String)
  location: class TurnOffChecking
TurnOffChecking.java:42: error: cannot find symbol
          print("FileNotFoundException: " + e);
          ^
  symbol:   method print(String)
  location: class TurnOffChecking
TurnOffChecking.java:44: error: cannot find symbol
          print("IOException: " + e);
          ^
  symbol:   method print(String)
  location: class TurnOffChecking
TurnOffChecking.java:46: error: cannot find symbol
          print("Throwable: " + e);
          ^
  symbol:   method print(String)
  location: class TurnOffChecking
34 errors
3 warnings

========================================
./frogbean
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./generics
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
MultipleInterfaceVariants.java:6: error: duplicate class: Employee
class Employee implements Payable<Employee> {}
^
Apply.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArrayOfGeneric.java:5: warning: auxiliary class Generic in ArrayOfGenericReference.java should not be accessed from outside its own source file
  static Generic<Integer>[] gia;
         ^
BankTeller.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
BankTeller.java:12: error: cannot find symbol
  public static Generator<Customer> generator() {
                ^
  symbol:   class Generator
  location: class Customer
BankTeller.java:25: error: cannot find symbol
  public static Generator<Teller> generator =
                ^
  symbol:   class Generator
  location: class Teller
BasicGeneratorDemo.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CheckedList.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
DogsAndRobots.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
DogsAndRobots.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DogsAndRobots.java:6: error: cannot find symbol
class PerformingDog extends Dog implements Performs {
                            ^
  symbol: class Dog
DynamicProxyMixin.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
DynamicProxyMixin.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Tuple.*;
                               ^
DynamicProxyMixin.java:9: error: cannot find symbol
  public MixinProxy(TwoTuple<Object,Class<?>>... pairs) {
                    ^
  symbol:   class TwoTuple
  location: class MixinProxy
DynamicProxyMixin.java:28: error: cannot find symbol
  public static Object newInstance(TwoTuple... pairs) {
                                   ^
  symbol:   class TwoTuple
  location: class MixinProxy
ExplicitTypeSpecification.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
ExplicitTypeSpecification.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ExplicitTypeSpecification.java:7: error: cannot find symbol
  static void f(Map<Person, List<Pet>> petPeople) {}
                    ^
  symbol:   class Person
  location: class ExplicitTypeSpecification
ExplicitTypeSpecification.java:7: error: cannot find symbol
  static void f(Map<Person, List<Pet>> petPeople) {}
                                 ^
  symbol:   class Pet
  location: class ExplicitTypeSpecification
Fibonacci.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Fibonacci.java:5: error: cannot find symbol
public class Fibonacci implements Generator<Integer> {
                                  ^
  symbol: class Generator
Fill2.java:4: error: package generics.coffee does not exist
import generics.coffee.*;
^
Fill2.java:6: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Fill2.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Fill2.java:24: error: cannot find symbol
  Generator<T> generator, int size) {
  ^
  symbol:   class Generator
  location: class Fill2
Functional.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Generators.java:3: error: package generics.coffee does not exist
import generics.coffee.*;
^
Generators.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Generators.java:9: error: cannot find symbol
  fill(Collection<T> coll, Generator<T> gen, int n) {
                           ^
  symbol:   class Generator
  location: class Generators
GenericReading.java:8: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
  static List<Apple> apples = Arrays.asList(new Apple());
              ^
GenericReading.java:9: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
  static List<Fruit> fruit = Arrays.asList(new Fruit());
              ^
GenericWriting.java:8: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
  static List<Apple> apples = new ArrayList<Apple>();
              ^
GenericWriting.java:9: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
  static List<Fruit> fruit = new ArrayList<Fruit>();
              ^
InheritBounds.java:9: warning: auxiliary class HasColor in BasicBounds.java should not be accessed from outside its own source file
class Colored2<T extends HasColor> extends HoldItem<T> {
                         ^
InheritBounds.java:14: warning: auxiliary class Dimension in BasicBounds.java should not be accessed from outside its own source file
class ColoredDimension2<T extends Dimension & HasColor>
                                  ^
InheritBounds.java:14: warning: auxiliary class HasColor in BasicBounds.java should not be accessed from outside its own source file
class ColoredDimension2<T extends Dimension & HasColor>
                                              ^
InheritBounds.java:22: warning: auxiliary class Dimension in BasicBounds.java should not be accessed from outside its own source file
class Solid2<T extends Dimension & HasColor & Weight>
                       ^
InheritBounds.java:22: warning: auxiliary class HasColor in BasicBounds.java should not be accessed from outside its own source file
class Solid2<T extends Dimension & HasColor & Weight>
                                   ^
InheritBounds.java:22: warning: auxiliary class Weight in BasicBounds.java should not be accessed from outside its own source file
class Solid2<T extends Dimension & HasColor & Weight>
                                              ^
InstantiateGenericType.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
LatentReflection.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
LimitsOfInference.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
LimitsOfInference.java:7: error: cannot find symbol
  f(Map<Person, List<? extends Pet>> petPeople) {}
        ^
  symbol:   class Person
  location: class LimitsOfInference
LimitsOfInference.java:7: error: cannot find symbol
  f(Map<Person, List<? extends Pet>> petPeople) {}
                               ^
  symbol:   class Pet
  location: class LimitsOfInference
MultipleInterfaceVariants.java:7: warning: auxiliary class Employee in InstantiateGenericType.java should not be accessed from outside its own source file
class Hourly extends Employee
                     ^
NonCovariantGenerics.java:7: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
  List<Fruit> flist = new ArrayList<Apple>();
       ^
OrdinaryArguments.java:4: warning: auxiliary class Base in CovariantReturnTypes.java should not be accessed from outside its own source file
  void set(Base base) {
           ^
OrdinaryArguments.java:10: warning: auxiliary class Derived in CovariantReturnTypes.java should not be accessed from outside its own source file
  void set(Derived derived) {
           ^
PlainGenericInheritance.java:9: warning: auxiliary class Base in CovariantReturnTypes.java should not be accessed from outside its own source file
class DerivedGS extends GenericSetter<Base> {
                                      ^
PlainGenericInheritance.java:10: warning: auxiliary class Derived in CovariantReturnTypes.java should not be accessed from outside its own source file
  void set(Derived derived){
           ^
PrimitiveGenericTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PrimitiveGenericTest.java:6: error: cannot find symbol
  public static <T> T[] fill(T[] a, Generator<T> gen) {
                                    ^
  symbol:   class Generator
  location: class FArray
SelfBoundingMethods.java:4: warning: auxiliary class SelfBounded in SelfBounding.java should not be accessed from outside its own source file
  static <T extends SelfBounded<T>> T f(T arg) {
                    ^
SimplerPets.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
SimplerPets.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Store.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Store.java:22: error: cannot find symbol
  public static Generator<Product> generator =
                ^
  symbol:   class Generator
  location: class Product
SuperTypeWildcards.java:5: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
  static void writeTo(List<? super Apple> apples) {
                                   ^
TupleList.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TupleList.java:7: error: cannot find symbol
extends ArrayList<FourTuple<A,B,C,D>> {
                  ^
  symbol: class FourTuple
TupleTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TupleTest.java:8: error: cannot find symbol
  static TwoTuple<String,Integer> f() {
         ^
  symbol:   class TwoTuple
  location: class TupleTest
TupleTest.java:12: error: cannot find symbol
  static ThreeTuple<Amphibian,String,Integer> g() {
         ^
  symbol:   class ThreeTuple
  location: class TupleTest
TupleTest.java:17: error: cannot find symbol
  FourTuple<Vehicle,Amphibian,String,Integer> h() {
  ^
  symbol:   class FourTuple
  location: class TupleTest
TupleTest.java:23: error: cannot find symbol
  FiveTuple<Vehicle,Amphibian,String,Integer,Double> k() {
  ^
  symbol:   class FiveTuple
  location: class TupleTest
TupleTest2.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TupleTest2.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Tuple.*;
                               ^
TupleTest2.java:6: error: cannot find symbol
  static TwoTuple<String,Integer> f() {
         ^
  symbol:   class TwoTuple
  location: class TupleTest2
TupleTest2.java:9: error: cannot find symbol
  static TwoTuple f2() { return tuple("hi", 47); }
         ^
  symbol:   class TwoTuple
  location: class TupleTest2
TupleTest2.java:10: error: cannot find symbol
  static ThreeTuple<Amphibian,String,Integer> g() {
         ^
  symbol:   class ThreeTuple
  location: class TupleTest2
TupleTest2.java:10: warning: auxiliary class Amphibian in TupleTest.java should not be accessed from outside its own source file
  static ThreeTuple<Amphibian,String,Integer> g() {
                    ^
TupleTest2.java:14: error: cannot find symbol
  FourTuple<Vehicle,Amphibian,String,Integer> h() {
  ^
  symbol:   class FourTuple
  location: class TupleTest2
TupleTest2.java:14: warning: auxiliary class Vehicle in TupleTest.java should not be accessed from outside its own source file
  FourTuple<Vehicle,Amphibian,String,Integer> h() {
            ^
TupleTest2.java:14: warning: auxiliary class Amphibian in TupleTest.java should not be accessed from outside its own source file
  FourTuple<Vehicle,Amphibian,String,Integer> h() {
                    ^
TupleTest2.java:18: error: cannot find symbol
  FiveTuple<Vehicle,Amphibian,String,Integer,Double> k() {
  ^
  symbol:   class FiveTuple
  location: class TupleTest2
TupleTest2.java:18: warning: auxiliary class Vehicle in TupleTest.java should not be accessed from outside its own source file
  FiveTuple<Vehicle,Amphibian,String,Integer,Double> k() {
            ^
TupleTest2.java:18: warning: auxiliary class Amphibian in TupleTest.java should not be accessed from outside its own source file
  FiveTuple<Vehicle,Amphibian,String,Integer,Double> k() {
                    ^
UseList.java:7: error: name clash: f(List<W>) and f(List<T>) have the same erasure
  void f(List<W> v) {}
       ^
  where W,T are type-variables:
    W extends Object declared in class UseList
    T extends Object declared in class UseList
WatercolorSets.java:2: error: package generics.watercolors does not exist
import generics.watercolors.*;
^
WatercolorSets.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
WatercolorSets.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Sets.*;
                               ^
WatercolorSets.java:6: error: package generics.watercolors does not exist
import static generics.watercolors.Watercolors.*;
                                  ^
Apply.java:21: error: cannot find symbol
  public void rotate() { print(this + " rotate"); }
                         ^
  symbol:   method print(String)
  location: class Shape
Apply.java:23: error: cannot find symbol
    print(this + " resize " + newSize);
    ^
  symbol:   method print(String)
  location: class Shape
ArrayOfGeneric.java:11: warning: auxiliary class Generic in ArrayOfGenericReference.java should not be accessed from outside its own source file
    gia = (Generic<Integer>[])new Generic[SIZE];
           ^
ArrayOfGeneric.java:11: warning: auxiliary class Generic in ArrayOfGenericReference.java should not be accessed from outside its own source file
    gia = (Generic<Integer>[])new Generic[SIZE];
                                  ^
ArrayOfGeneric.java:11: warning: [rawtypes] found raw type: Generic
    gia = (Generic<Integer>[])new Generic[SIZE];
                                  ^
  missing type arguments for generic class Generic<T>
  where T is a type-variable:
    T extends Object declared in class Generic
ArrayOfGeneric.java:13: warning: auxiliary class Generic in ArrayOfGenericReference.java should not be accessed from outside its own source file
    gia[0] = new Generic<Integer>();
                 ^
BankTeller.java:13: error: cannot find symbol
    return new Generator<Customer>() {
               ^
  symbol:   class Generator
  location: class Customer
BankTeller.java:26: error: cannot find symbol
    new Generator<Teller>() {
        ^
  symbol:   class Generator
  location: class Teller
BasicGeneratorDemo.java:6: error: cannot find symbol
    Generator<CountedObject> gen =
    ^
  symbol:   class Generator
  location: class BasicGeneratorDemo
BasicGeneratorDemo.java:7: error: cannot find symbol
      BasicGenerator.create(CountedObject.class);
      ^
  symbol:   variable BasicGenerator
  location: class BasicGeneratorDemo
CaptureConversion.java:13: warning: [rawtypes] found raw type: Holder
    Holder raw = new Holder<Integer>(1);
    ^
  missing type arguments for generic class Holder<T>
  where T is a type-variable:
    T extends Object declared in class Holder
CaptureConversion.java:16: warning: [rawtypes] found raw type: Holder
    Holder rawBasic = new Holder();
    ^
  missing type arguments for generic class Holder<T>
  where T is a type-variable:
    T extends Object declared in class Holder
CaptureConversion.java:16: warning: [rawtypes] found raw type: Holder
    Holder rawBasic = new Holder();
                          ^
  missing type arguments for generic class Holder<T>
  where T is a type-variable:
    T extends Object declared in class Holder
Holder.java:13: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Holder<Apple> Apple = new Holder<Apple>(new Apple());
           ^
Holder.java:13: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Holder<Apple> Apple = new Holder<Apple>(new Apple());
                                     ^
Holder.java:13: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Holder<Apple> Apple = new Holder<Apple>(new Apple());
                                                ^
Holder.java:14: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Apple d = Apple.get();
    ^
Holder.java:17: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
    Holder<? extends Fruit> fruit = Apple; // OK
                     ^
Holder.java:18: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
    Fruit p = fruit.get();
    ^
Holder.java:19: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    d = (Apple)fruit.get(); // Returns 'Object'
         ^
Holder.java:21: warning: auxiliary class Orange in CovariantArrays.java should not be accessed from outside its own source file
      Orange c = (Orange)fruit.get(); // No warning
      ^
Holder.java:21: warning: auxiliary class Orange in CovariantArrays.java should not be accessed from outside its own source file
      Orange c = (Orange)fruit.get(); // No warning
                  ^
Holder.java:3: warning: [overrides] Class Holder overrides equals, but neither it nor any superclass overrides hashCode method
public class Holder<T> {
       ^
CheckedList.java:8: warning: [rawtypes] found raw type: List
  static void oldStyleMethod(List probablyDogs) {
                             ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
CheckedList.java:9: warning: auxiliary class Cat in HijackedInterface.java should not be accessed from outside its own source file
    probablyDogs.add(new Cat());
                         ^
CheckedList.java:12: error: cannot find symbol
    List<Dog> dogs1 = new ArrayList<Dog>();
         ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:12: error: cannot find symbol
    List<Dog> dogs1 = new ArrayList<Dog>();
                                    ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:14: error: cannot find symbol
    List<Dog> dogs2 = Collections.checkedList(
         ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:15: error: cannot find symbol
      new ArrayList<Dog>(), Dog.class);
                    ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:15: error: cannot find symbol
      new ArrayList<Dog>(), Dog.class);
                            ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:22: error: cannot find symbol
    List<Pet> pets = Collections.checkedList(
         ^
  symbol:   class Pet
  location: class CheckedList
CheckedList.java:23: error: cannot find symbol
      new ArrayList<Pet>(), Pet.class);
                    ^
  symbol:   class Pet
  location: class CheckedList
CheckedList.java:23: error: cannot find symbol
      new ArrayList<Pet>(), Pet.class);
                            ^
  symbol:   class Pet
  location: class CheckedList
CheckedList.java:24: error: cannot find symbol
    pets.add(new Dog());
                 ^
  symbol:   class Dog
  location: class CheckedList
CheckedList.java:25: warning: auxiliary class Cat in HijackedInterface.java should not be accessed from outside its own source file
    pets.add(new Cat());
                 ^
ClassCasting.java:13: warning: auxiliary class Widget in FactoryConstraint.java should not be accessed from outside its own source file
    List<Widget> lw2 = List.class.cast(in.readObject());
         ^
CompilerIntelligence.java:6: warning: auxiliary class Fruit in CovariantArrays.java should not be accessed from outside its own source file
    List<? extends Fruit> flist =
                   ^
CompilerIntelligence.java:7: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
      Arrays.asList(new Apple());
                        ^
CompilerIntelligence.java:8: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Apple a = (Apple)flist.get(0); // No warning
    ^
CompilerIntelligence.java:8: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    Apple a = (Apple)flist.get(0); // No warning
               ^
CompilerIntelligence.java:9: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    flist.contains(new Apple()); // Argument is 'Object'
                       ^
CompilerIntelligence.java:10: warning: auxiliary class Apple in CovariantArrays.java should not be accessed from outside its own source file
    flist.indexOf(new Apple()); // Argument is 'Object'
                      ^
DogsAndRobots.java:7: error: cannot find symbol
  public void speak() { print("Woof!"); }
                        ^
  symbol:   method print(String)
  location: class PerformingDog
DogsAndRobots.java:8: error: cannot find symbol
  public void sit() { print("Sitting"); }
                      ^
  symbol:   method print(String)
  location: class PerformingDog

========================================
./generics/coffee
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
CoffeeGenerator.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CoffeeGenerator.java:8: error: cannot find symbol
implements Generator<Coffee>, Iterable<Coffee> {
           ^
  symbol: class Generator
CoffeeGenerator.java:9: warning: [rawtypes] found raw type: Class
  private Class[] types = { Latte.class, Mocha.class,
          ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
2 errors
4 warnings

========================================
./generics/decorator
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./generics/watercolors
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./gui
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
BangBean2.java:9: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
BeanDumper.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
BorderLayout1.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Borders.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Button1.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Button2.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Button2b.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
ButtonGroups.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Buttons.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
CheckBoxes.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
ColorBoxes.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
ComboBoxes.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Dialogs.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Faces.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
FileChooserTest.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
FlowLayout1.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
GridLayout1.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
HTMLButton.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
InterruptableLongRunningCallable.java:7: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
InterruptableLongRunningCallable.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
InterruptableLongRunningTask.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
InterruptableLongRunningCallable.java:10: warning: auxiliary class Task in InterruptableLongRunningTask.java should not be accessed from outside its own source file
class CallableTask extends Task
                           ^
InterruptableLongRunningCallable.java:24: error: cannot find symbol
  private TaskManager<String,CallableTask> manager =
          ^
  symbol:   class TaskManager
  location: class InterruptableLongRunningCallable
List.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
LongRunningTask.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
LookAndFeel.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Menus.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
MessageBoxes.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
MonitoredLongRunningCallable.java:7: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
MonitoredLongRunningCallable.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
MonitoredLongRunningCallable.java:53: error: cannot find symbol
  private TaskManager<String,MonitoredCallable> manager =
          ^
  symbol:   class TaskManager
  location: class MonitoredLongRunningCallable
Popup.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
Progress.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
RadioButtons.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
ShowAddListeners.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
SimpleMenus.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
SineWave.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TabbedPane1.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TextArea.java:7: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TextArea.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TextFields.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TextPane.java:6: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TextPane.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TextPane.java:12: error: cannot find symbol
  private static Generator sg =
                 ^
  symbol:   class Generator
  location: class TextPane
TicTacToe.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
TrackEvent.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.SwingConsole.*;
                               ^
BangBean2.java:109: error: cannot find symbol
    run(frame, 300, 300);
    ^
  symbol:   method run(JFrame,int,int)
  location: class BangBean2
BeanDumper.java:83: error: cannot find symbol
    run(new BeanDumper(), 600, 500);
    ^
  symbol:   method run(BeanDumper,int,int)
  location: class BeanDumper
BorderLayout1.java:16: error: cannot find symbol
    run(new BorderLayout1(), 300, 250);
    ^
  symbol:   method run(BorderLayout1,int,int)
  location: class BorderLayout1
Borders.java:35: error: cannot find symbol
    run(new Borders(), 500, 300);
    ^
  symbol:   method run(Borders,int,int)
  location: class Borders
Button1.java:17: error: cannot find symbol
    run(new Button1(), 200, 100);
    ^
  symbol:   method run(Button1,int,int)
  location: class Button1
Button2.java:29: error: cannot find symbol
    run(new Button2(), 200, 150);
    ^
  symbol:   method run(Button2,int,int)
  location: class Button2
Button2b.java:28: error: cannot find symbol
    run(new Button2b(), 200, 150);
    ^
  symbol:   method run(Button2b,int,int)
  location: class Button2b
ButtonGroups.java:26: warning: [rawtypes] found raw type: Constructor
        Constructor ctor =
        ^
  missing type arguments for generic class Constructor<T>
  where T is a type-variable:
    T extends Object declared in class Constructor
ButtonGroups.java:46: error: cannot find symbol
    run(new ButtonGroups(), 500, 350);
    ^
  symbol:   method run(ButtonGroups,int,int)
  location: class ButtonGroups
Buttons.java:31: error: cannot find symbol
    run(new Buttons(), 350, 200);
    ^
  symbol:   method run(Buttons,int,int)
  location: class Buttons
CheckBoxes.java:43: error: cannot find symbol
    run(new CheckBoxes(), 200, 300);
    ^
  symbol:   method run(CheckBoxes,int,int)
  location: class CheckBoxes
ColorBoxes.java:52: error: cannot find symbol
    run(boxes, 500, 400);
    ^
  symbol:   method run(ColorBoxes,int,int)
  location: class ColorBoxes
ComboBoxes.java:14: warning: [rawtypes] found raw type: JComboBox
  private JComboBox c = new JComboBox();
          ^
  missing type arguments for generic class JComboBox<E>
  where E is a type-variable:
    E extends Object declared in class JComboBox
ComboBoxes.java:14: warning: [rawtypes] found raw type: JComboBox
  private JComboBox c = new JComboBox();
                            ^
  missing type arguments for generic class JComboBox<E>
  where E is a type-variable:
    E extends Object declared in class JComboBox
ComboBoxes.java:19: warning: [unchecked] unchecked call to addItem(E) as a member of the raw type JComboBox
      c.addItem(description[count++]);
               ^
  where E is a type-variable:
    E extends Object declared in class JComboBox
ComboBoxes.java:24: warning: [unchecked] unchecked call to addItem(E) as a member of the raw type JComboBox
          c.addItem(description[count++]);
                   ^
  where E is a type-variable:
    E extends Object declared in class JComboBox
ComboBoxes.java:39: error: cannot find symbol
    run(new ComboBoxes(), 200, 175);
    ^
  symbol:   method run(ComboBoxes,int,int)
  location: class ComboBoxes
Dialogs.java:36: error: cannot find symbol
    run(new Dialogs(), 125, 75);
    ^
  symbol:   method run(Dialogs,int,int)
  location: class Dialogs
Faces.java:55: error: cannot find symbol
    run(new Faces(), 250, 125);
    ^
  symbol:   method run(Faces,int,int)
  location: class Faces
FileChooserTest.java:61: error: cannot find symbol
    run(new FileChooserTest(), 250, 150);
    ^
  symbol:   method run(FileChooserTest,int,int)
  location: class FileChooserTest
FlowLayout1.java:14: error: cannot find symbol
    run(new FlowLayout1(), 300, 300);
    ^
  symbol:   method run(FlowLayout1,int,int)
  location: class FlowLayout1
GridLayout1.java:14: error: cannot find symbol
    run(new GridLayout1(), 300, 300);
    ^
  symbol:   method run(GridLayout1,int,int)
  location: class GridLayout1
HTMLButton.java:25: error: cannot find symbol
    run(new HTMLButton(), 200, 500);
    ^
  symbol:   method run(HTMLButton,int,int)
  location: class HTMLButton
InterruptableLongRunningCallable.java:25: error: cannot find symbol
    new TaskManager<String,CallableTask>();
        ^
  symbol:   class TaskManager
  location: class InterruptableLongRunningCallable
InterruptableLongRunningCallable.java:43: error: cannot find symbol
        for(TaskItem<String,CallableTask> tt :
            ^
  symbol: class TaskItem
InterruptableLongRunningCallable.java:56: error: cannot find symbol
    run(new InterruptableLongRunningCallable(), 200, 150);
    ^
  symbol:   method run(InterruptableLongRunningCallable,int,int)
  location: class InterruptableLongRunningCallable
InterruptableLongRunningTask.java:50: error: cannot find symbol
    run(new InterruptableLongRunningTask(), 200, 150);
    ^
  symbol:   method run(InterruptableLongRunningTask,int,int)
  location: class InterruptableLongRunningTask
List.java:15: warning: [rawtypes] found raw type: DefaultListModel
  private DefaultListModel lItems = new DefaultListModel();
          ^
  missing type arguments for generic class DefaultListModel<E>
  where E is a type-variable:
    E extends Object declared in class DefaultListModel
List.java:15: warning: [rawtypes] found raw type: DefaultListModel
  private DefaultListModel lItems = new DefaultListModel();
                                        ^
  missing type arguments for generic class DefaultListModel<E>
  where E is a type-variable:
    E extends Object declared in class DefaultListModel
List.java:16: warning: [rawtypes] found raw type: JList
  private JList lst = new JList(lItems);
          ^
  missing type arguments for generic class JList<E>
  where E is a type-variable:
    E extends Object declared in class JList
List.java:16: warning: [rawtypes] found raw type: JList
  private JList lst = new JList(lItems);
                          ^
  missing type arguments for generic class JList<E>
  where E is a type-variable:
    E extends Object declared in class JList
List.java:16: warning: [unchecked] unchecked call to JList(ListModel<E>) as a member of the raw type JList
  private JList lst = new JList(lItems);
                      ^
  where E is a type-variable:
    E extends Object declared in class JList
List.java:23: warning: [unchecked] unchecked call to add(int,E) as a member of the raw type DefaultListModel
        lItems.add(0, flavors[count++]);
                  ^
  where E is a type-variable:
    E extends Object declared in class DefaultListModel
List.java:36: warning: [deprecation] getSelectedValues() in JList has been deprecated
        for(Object item : lst.getSelectedValues())
                             ^
List.java:51: warning: [unchecked] unchecked call to addElement(E) as a member of the raw type DefaultListModel
      lItems.addElement(flavors[count++]);
                       ^
  where E is a type-variable:
    E extends Object declared in class DefaultListModel
List.java:60: error: cannot find symbol
    run(new List(), 250, 375);
    ^
  symbol:   method run(List,int,int)
  location: class List
LongRunningTask.java:36: error: cannot find symbol
    run(new LongRunningTask(), 200, 150);
    ^
  symbol:   method run(LongRunningTask,int,int)
  location: class LongRunningTask
LookAndFeel.java:17: warning: [rawtypes] found raw type: JComboBox
    new JComboBox(choices),
        ^
  missing type arguments for generic class JComboBox<E>
  where E is a type-variable:
    E extends Object declared in class JComboBox
LookAndFeel.java:17: warning: [unchecked] unchecked call to JComboBox(E[]) as a member of the raw type JComboBox
    new JComboBox(choices),
    ^
  where E is a type-variable:
    E extends Object declared in class JComboBox
LookAndFeel.java:18: warning: [rawtypes] found raw type: JList
    new JList(choices),
        ^
  missing type arguments for generic class JList<E>
  where E is a type-variable:
    E extends Object declared in class JList
LookAndFeel.java:18: warning: [unchecked] unchecked call to JList(E[]) as a member of the raw type JList
    new JList(choices),
    ^
  where E is a type-variable:
    E extends Object declared in class JList
LookAndFeel.java:57: error: cannot find symbol
    run(new LookAndFeel(), 300, 300);
    ^
  symbol:   method run(LookAndFeel,int,int)
  location: class LookAndFeel
Menus.java:147: error: cannot find symbol
    run(new Menus(), 300, 200);
    ^
  symbol:   method run(Menus,int,int)
  location: class Menus
MessageBoxes.java:59: error: cannot find symbol
    run(new MessageBoxes(), 200, 200);
    ^
  symbol:   method run(MessageBoxes,int,int)
  location: class MessageBoxes
MonitoredLongRunningCallable.java:54: error: cannot find symbol
    new TaskManager<String,MonitoredCallable>();
        ^
  symbol:   class TaskManager
  location: class MonitoredLongRunningCallable
MonitoredLongRunningCallable.java:85: error: cannot find symbol
    run(new MonitoredLongRunningCallable(), 200, 500);
    ^
  symbol:   method run(MonitoredLongRunningCallable,int,int)
  location: class MonitoredLongRunningCallable
Popup.java:49: error: cannot find symbol
    run(new Popup(), 300, 200);
    ^
  symbol:   method run(Popup,int,int)
  location: class Popup
Progress.java:34: error: cannot find symbol
    run(new Progress(), 300, 200);
    ^
  symbol:   method run(Progress,int,int)
  location: class Progress
RadioButtons.java:34: error: cannot find symbol
    run(new RadioButtons(), 200, 125);
    ^
  symbol:   method run(RadioButtons,int,int)
  location: class RadioButtons
ShowAddListeners.java:56: error: cannot find symbol
    run(new ShowAddListeners(), 500, 400);
    ^
  symbol:   method run(ShowAddListeners,int,int)
  location: class ShowAddListeners
SimpleMenus.java:38: error: cannot find symbol
    run(new SimpleMenus(), 200, 150);
    ^
  symbol:   method run(SimpleMenus,int,int)
  location: class SimpleMenus
SineWave.java:59: error: cannot find symbol
    run(new SineWave(), 700, 400);
    ^
  symbol:   method run(SineWave,int,int)
  location: class SineWave
TabbedPane1.java:31: error: cannot find symbol
    run(new TabbedPane1(), 400, 250);
    ^
  symbol:   method run(TabbedPane1,int,int)
  location: class TabbedPane1
TextArea.java:19: error: cannot find symbol
    m.putAll(Countries.capitals());
             ^
  symbol:   variable Countries
  location: class TextArea
TextArea.java:22: warning: [rawtypes] found raw type: Entry
        for(Map.Entry me : m.entrySet())
               ^
  missing type arguments for generic class Entry<K,V>
  where K,V are type-variables:
    K extends Object declared in interface Entry
    V extends Object declared in interface Entry
TextArea.java:37: error: cannot find symbol
    run(new TextArea(), 475, 425);
    ^
  symbol:   method run(TextArea,int,int)
  location: class TextArea
TextFields.java:67: error: cannot find symbol
    run(new TextFields(), 375, 200);
    ^
  symbol:   method run(TextFields,int,int)
  location: class TextFields
TextPane.java:13: error: package RandomGenerator does not exist
    new RandomGenerator.String(7);
                       ^
TextPane.java:25: error: cannot find symbol
    run(new TextPane(), 475, 425);
    ^
  symbol:   method run(TextPane,int,int)
  location: class TextPane
TicTacToe.java:79: error: cannot find symbol
    run(new TicTacToe(), 200, 200);
    ^
  symbol:   method run(TicTacToe,int,int)
  location: class TicTacToe
TrackEvent.java:91: error: cannot find symbol
    run(new TrackEvent(), 700, 500);
    ^
  symbol:   method run(TrackEvent,int,int)
  location: class TrackEvent
88 errors
22 warnings

========================================
./gui/flex
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./gui/jnlp
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
JnlpFileChooser.java:10: error: package javax.jnlp does not exist
import javax.jnlp.*;
^
JnlpFileChooser.java:23: error: cannot find symbol
  private FileContents fileContents;
          ^
  symbol:   class FileContents
  location: class JnlpFileChooser
JnlpFileChooser.java:43: error: cannot find symbol
      FileOpenService fs = null;
      ^
  symbol:   class FileOpenService
  location: class JnlpFileChooser.OpenL
JnlpFileChooser.java:45: error: cannot find symbol
        fs = (FileOpenService)ServiceManager.lookup(
              ^
  symbol:   class FileOpenService
  location: class JnlpFileChooser.OpenL
JnlpFileChooser.java:45: error: cannot find symbol
        fs = (FileOpenService)ServiceManager.lookup(
                              ^
  symbol:   variable ServiceManager
  location: class JnlpFileChooser.OpenL
JnlpFileChooser.java:47: error: cannot find symbol
      } catch(UnavailableServiceException use) {
              ^
  symbol:   class UnavailableServiceException
  location: class JnlpFileChooser.OpenL
JnlpFileChooser.java:67: error: cannot find symbol
      FileSaveService fs = null;
      ^
  symbol:   class FileSaveService
  location: class JnlpFileChooser.SaveL
JnlpFileChooser.java:69: error: cannot find symbol
        fs = (FileSaveService)ServiceManager.lookup(
              ^
  symbol:   class FileSaveService
  location: class JnlpFileChooser.SaveL
JnlpFileChooser.java:69: error: cannot find symbol
        fs = (FileSaveService)ServiceManager.lookup(
                              ^
  symbol:   variable ServiceManager
  location: class JnlpFileChooser.SaveL
JnlpFileChooser.java:71: error: cannot find symbol
      } catch(UnavailableServiceException use) {
              ^
  symbol:   class UnavailableServiceException
  location: class JnlpFileChooser.SaveL
10 errors
3 warnings

========================================
./holding
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
CollectionSequence.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
CollectionSequence.java:6: error: cannot find symbol
extends AbstractCollection<Pet> {
                           ^
  symbol: class Pet
CollectionSequence.java:7: error: cannot find symbol
  private Pet[] pets = Pets.createArray(8);
          ^
  symbol:   class Pet
  location: class CollectionSequence
CollectionSequence.java:9: error: cannot find symbol
  public Iterator<Pet> iterator() {
                  ^
  symbol:   class Pet
  location: class CollectionSequence
ContainerMethods.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
CrossContainerIteration.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
CrossContainerIteration.java:6: error: cannot find symbol
  public static void display(Iterator<Pet> it) {
                                      ^
  symbol:   class Pet
  location: class CrossContainerIteration
GenericsAndUpcasting.java:4: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
class GrannySmith extends Apple {}
                          ^
GenericsAndUpcasting.java:5: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
class Gala extends Apple {}
                   ^
GenericsAndUpcasting.java:6: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
class Fuji extends Apple {}
                   ^
GenericsAndUpcasting.java:7: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
class Braeburn extends Apple {}
                       ^
InterfaceVsIterator.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
InterfaceVsIterator.java:6: error: cannot find symbol
  public static void display(Iterator<Pet> it) {
                                      ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:13: error: cannot find symbol
  public static void display(Collection<Pet> pets) {
                                        ^
  symbol:   class Pet
  location: class InterfaceVsIterator
LinkedListFeatures.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
LinkedListFeatures.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ListFeatures.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
ListFeatures.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ListIteration.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
MapOfList.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
MapOfList.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MapOfList.java:8: error: cannot find symbol
  public static Map<Person, List<? extends Pet>>
                    ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:8: error: cannot find symbol
  public static Map<Person, List<? extends Pet>>
                                           ^
  symbol:   class Pet
  location: class MapOfList
NonCollectionSequence.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
NonCollectionSequence.java:6: error: cannot find symbol
  protected Pet[] pets = Pets.createArray(8);
            ^
  symbol:   class Pet
  location: class PetSequence
NonCollectionSequence.java:10: error: cannot find symbol
  public Iterator<Pet> iterator() {
                  ^
  symbol:   class Pet
  location: class NonCollectionSequence
PetMap.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
PetMap.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PrintingContainers.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SetOperations.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SimpleIteration.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
StackCollision.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
StackTest.java:2: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
UniqueWords.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
UniqueWordsAlphabetic.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ApplesAndOrangesWithGenerics.java:6: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    ArrayList<Apple> apples = new ArrayList<Apple>();
              ^
ApplesAndOrangesWithGenerics.java:6: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    ArrayList<Apple> apples = new ArrayList<Apple>();
                                            ^
ApplesAndOrangesWithGenerics.java:8: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
      apples.add(new Apple());
                     ^
ApplesAndOrangesWithGenerics.java:14: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    for(Apple c : apples)
        ^
ApplesAndOrangesWithoutGenerics.java:17: warning: [rawtypes] found raw type: ArrayList
    ArrayList apples = new ArrayList();
    ^
  missing type arguments for generic class ArrayList<E>
  where E is a type-variable:
    E extends Object declared in class ArrayList
ApplesAndOrangesWithoutGenerics.java:17: warning: [rawtypes] found raw type: ArrayList
    ArrayList apples = new ArrayList();
                           ^
  missing type arguments for generic class ArrayList<E>
  where E is a type-variable:
    E extends Object declared in class ArrayList
CollectionSequence.java:7: error: cannot find symbol
  private Pet[] pets = Pets.createArray(8);
                       ^
  symbol:   variable Pets
  location: class CollectionSequence
CollectionSequence.java:10: error: cannot find symbol
    return new Iterator<Pet>() {
                        ^
  symbol:   class Pet
  location: class CollectionSequence
CollectionSequence.java:15: error: cannot find symbol
      public Pet next() { return pets[index++]; }
             ^
  symbol: class Pet
ContainerMethods.java:6: error: cannot find symbol
    ContainerMethodDifferences.main(args);
    ^
  symbol:   variable ContainerMethodDifferences
  location: class ContainerMethods
CrossContainerIteration.java:8: error: cannot find symbol
      Pet p = it.next();
      ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:14: error: cannot find symbol
    ArrayList<Pet> pets = Pets.arrayList(8);
              ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:14: error: cannot find symbol
    ArrayList<Pet> pets = Pets.arrayList(8);
                          ^
  symbol:   variable Pets
  location: class CrossContainerIteration
CrossContainerIteration.java:15: error: cannot find symbol
    LinkedList<Pet> petsLL = new LinkedList<Pet>(pets);
               ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:15: error: cannot find symbol
    LinkedList<Pet> petsLL = new LinkedList<Pet>(pets);
                                            ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:16: error: cannot find symbol
    HashSet<Pet> petsHS = new HashSet<Pet>(pets);
            ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:16: error: cannot find symbol
    HashSet<Pet> petsHS = new HashSet<Pet>(pets);
                                      ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:17: error: cannot find symbol
    TreeSet<Pet> petsTS = new TreeSet<Pet>(pets);
            ^
  symbol:   class Pet
  location: class CrossContainerIteration
CrossContainerIteration.java:17: error: cannot find symbol
    TreeSet<Pet> petsTS = new TreeSet<Pet>(pets);
                                      ^
  symbol:   class Pet
  location: class CrossContainerIteration
EnvironmentVariables.java:6: warning: [rawtypes] found raw type: Entry
    for(Map.Entry entry: System.getenv().entrySet()) {
           ^
  missing type arguments for generic class Entry<K,V>
  where K,V are type-variables:
    K extends Object declared in interface Entry
    V extends Object declared in interface Entry
GenericsAndUpcasting.java:11: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    ArrayList<Apple> apples = new ArrayList<Apple>();
              ^
GenericsAndUpcasting.java:11: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    ArrayList<Apple> apples = new ArrayList<Apple>();
                                            ^
GenericsAndUpcasting.java:16: warning: auxiliary class Apple in ApplesAndOrangesWithoutGenerics.java should not be accessed from outside its own source file
    for(Apple c : apples)
        ^
InterfaceVsIterator.java:8: error: cannot find symbol
      Pet p = it.next();
      ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:14: error: cannot find symbol
    for(Pet p : pets)
        ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:19: error: cannot find symbol
    List<Pet> petList = Pets.arrayList(8);
         ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:19: error: cannot find symbol
    List<Pet> petList = Pets.arrayList(8);
                        ^
  symbol:   variable Pets
  location: class InterfaceVsIterator
InterfaceVsIterator.java:20: error: cannot find symbol
    Set<Pet> petSet = new HashSet<Pet>(petList);
        ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:20: error: cannot find symbol
    Set<Pet> petSet = new HashSet<Pet>(petList);
                                  ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:21: error: cannot find symbol
    Map<String,Pet> petMap =
               ^
  symbol:   class Pet
  location: class InterfaceVsIterator
InterfaceVsIterator.java:22: error: cannot find symbol
      new LinkedHashMap<String,Pet>();
                               ^
  symbol:   class Pet
  location: class InterfaceVsIterator
LinkedListFeatures.java:8: error: cannot find symbol
    LinkedList<Pet> pets =
               ^
  symbol:   class Pet
  location: class LinkedListFeatures
LinkedListFeatures.java:9: error: cannot find symbol
      new LinkedList<Pet>(Pets.arrayList(5));
                     ^
  symbol:   class Pet
  location: class LinkedListFeatures
LinkedListFeatures.java:9: error: cannot find symbol
      new LinkedList<Pet>(Pets.arrayList(5));
                          ^
  symbol:   variable Pets
  location: class LinkedListFeatures
LinkedListFeatures.java:22: error: cannot find symbol
    pets.addFirst(new Rat());
                      ^
  symbol:   class Rat
  location: class LinkedListFeatures
LinkedListFeatures.java:24: error: cannot find symbol
    pets.offer(Pets.randomPet());
               ^
  symbol:   variable Pets
  location: class LinkedListFeatures
LinkedListFeatures.java:26: error: cannot find symbol
    pets.add(Pets.randomPet());
             ^
  symbol:   variable Pets
  location: class LinkedListFeatures
LinkedListFeatures.java:28: error: cannot find symbol
    pets.addLast(new Hamster());
                     ^
  symbol:   class Hamster
  location: class LinkedListFeatures
ListFeatures.java:9: error: cannot find symbol
    List<Pet> pets = Pets.arrayList(7);
         ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:9: error: cannot find symbol
    List<Pet> pets = Pets.arrayList(7);
                     ^
  symbol:   variable Pets
  location: class ListFeatures
ListFeatures.java:11: error: cannot find symbol
    Hamster h = new Hamster();
    ^
  symbol:   class Hamster
  location: class ListFeatures
ListFeatures.java:11: error: cannot find symbol
    Hamster h = new Hamster();
                    ^
  symbol:   class Hamster
  location: class ListFeatures
ListFeatures.java:16: error: cannot find symbol
    Pet p = pets.get(2);
    ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:18: error: cannot find symbol
    Pet cymric = new Cymric();
    ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:18: error: cannot find symbol
    Pet cymric = new Cymric();
                     ^
  symbol:   class Cymric
  location: class ListFeatures
ListFeatures.java:24: error: cannot find symbol
    pets.add(3, new Mouse()); // Insert at an index
                    ^
  symbol:   class Mouse
  location: class ListFeatures
ListFeatures.java:26: error: cannot find symbol
    List<Pet> sub = pets.subList(1, 4);
         ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:36: error: cannot find symbol
    List<Pet> copy = new ArrayList<Pet>(pets);
         ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:36: error: cannot find symbol
    List<Pet> copy = new ArrayList<Pet>(pets);
                                   ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:41: error: cannot find symbol
    copy = new ArrayList<Pet>(pets); // Get a fresh copy
                         ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:46: error: cannot find symbol
    copy.set(1, new Mouse()); // Replace an element
                    ^
  symbol:   class Mouse
  location: class ListFeatures
ListFeatures.java:50: error: cannot find symbol
    print("18: " + pets.isEmpty());
    ^
  symbol:   method print(String)
  location: class ListFeatures
ListFeatures.java:53: error: cannot find symbol
    print("20: " + pets.isEmpty());
    ^
  symbol:   method print(String)
  location: class ListFeatures
ListFeatures.java:54: error: cannot find symbol
    pets.addAll(Pets.arrayList(4));
                ^
  symbol:   variable Pets
  location: class ListFeatures
ListFeatures.java:57: error: cannot find symbol
    print("22: " + o[3]);
    ^
  symbol:   method print(String)
  location: class ListFeatures
ListFeatures.java:58: error: cannot find symbol
    Pet[] pa = pets.toArray(new Pet[0]);
    ^
  symbol:   class Pet
  location: class ListFeatures
ListFeatures.java:58: error: cannot find symbol
    Pet[] pa = pets.toArray(new Pet[0]);
                                ^
  symbol:   class Pet
  location: class ListFeatures
ListIteration.java:7: error: cannot find symbol
    List<Pet> pets = Pets.arrayList(8);
         ^
  symbol:   class Pet
  location: class ListIteration
ListIteration.java:7: error: cannot find symbol
    List<Pet> pets = Pets.arrayList(8);
                     ^
  symbol:   variable Pets
  location: class ListIteration
ListIteration.java:8: error: cannot find symbol
    ListIterator<Pet> it = pets.listIterator();
                 ^
  symbol:   class Pet
  location: class ListIteration
ListIteration.java:21: error: cannot find symbol
      it.set(Pets.randomPet());
             ^
  symbol:   variable Pets
  location: class ListIteration
MapOfList.java:9: error: cannot find symbol
    petPeople = new HashMap<Person, List<? extends Pet>>();
                            ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:9: error: cannot find symbol
    petPeople = new HashMap<Person, List<? extends Pet>>();
                                                   ^
  symbol:   class Pet
  location: class MapOfList
MapOfList.java:11: error: cannot find symbol
    petPeople.put(new Person("Dawn"),
                      ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:12: error: cannot find symbol
      Arrays.asList(new Cymric("Molly"),new Mutt("Spot")));
                        ^
  symbol:   class Cymric
  location: class MapOfList
MapOfList.java:12: error: cannot find symbol
      Arrays.asList(new Cymric("Molly"),new Mutt("Spot")));
                                            ^
  symbol:   class Mutt
  location: class MapOfList
MapOfList.java:13: error: cannot find symbol
    petPeople.put(new Person("Kate"),
                      ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:14: error: cannot find symbol
      Arrays.asList(new Cat("Shackleton"),
                        ^
  symbol:   class Cat
  location: class MapOfList
MapOfList.java:15: error: cannot find symbol
        new Cat("Elsie May"), new Dog("Margrett")));
            ^
  symbol:   class Cat
  location: class MapOfList
MapOfList.java:15: error: cannot find symbol
        new Cat("Elsie May"), new Dog("Margrett")));
                                  ^
  symbol:   class Dog
  location: class MapOfList
MapOfList.java:16: error: cannot find symbol
    petPeople.put(new Person("Marilyn"),
                      ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:18: error: cannot find symbol
       new Pug("Louie aka Louis Snorkelstein Dupree"),
           ^
  symbol:   class Pug
  location: class MapOfList
MapOfList.java:19: error: cannot find symbol
       new Cat("Stanford aka Stinky el Negro"),
           ^
  symbol:   class Cat
  location: class MapOfList
MapOfList.java:20: error: cannot find symbol
       new Cat("Pinkola")));	
           ^
  symbol:   class Cat
  location: class MapOfList
MapOfList.java:21: error: cannot find symbol
    petPeople.put(new Person("Luke"),
                      ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:22: error: cannot find symbol
      Arrays.asList(new Rat("Fuzzy"), new Rat("Fizzy")));
                        ^
  symbol:   class Rat
  location: class MapOfList
MapOfList.java:22: error: cannot find symbol
      Arrays.asList(new Rat("Fuzzy"), new Rat("Fizzy")));
                                          ^
  symbol:   class Rat
  location: class MapOfList
MapOfList.java:23: error: cannot find symbol
    petPeople.put(new Person("Isaac"),
                      ^
  symbol:   class Person
  location: class MapOfList
MapOfList.java:24: error: cannot find symbol
      Arrays.asList(new Rat("Freckly")));
                        ^
  symbol:   class Rat
  location: class MapOfList
PrintingContainers.java:7: warning: [rawtypes] found raw type: Collection
  static Collection fill(Collection<String> collection) {
         ^
  missing type arguments for generic class Collection<E>
  where E is a type-variable:
    E extends Object declared in interface Collection
PrintingContainers.java:14: warning: [rawtypes] found raw type: Map
  static Map fill(Map<String,String> map) {
         ^
  missing type arguments for generic class Map<K,V>
  where K,V are type-variables:
    K extends Object declared in interface Map
    V extends Object declared in interface Map
QueueDemo.java:6: warning: [rawtypes] found raw type: Queue
  public static void printQ(Queue queue) {
                            ^
  missing type arguments for generic class Queue<E>
  where E is a type-variable:
    E extends Object declared in interface Queue
100 errors
20 warnings

========================================
./initialization
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ArrayClassObj.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArrayNew.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArraysOfPrimitives.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Demotion.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ExplicitStatic.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Flower.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
InitialValues.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Mugs.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OrderOfInitialization.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Overloading.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OverloadingOrder.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PrimitiveOverloading.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
StaticInitialization.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArrayClassObj.java:10: error: cannot find symbol
    print("length of a = " + a.length);
    ^
  symbol:   method print(String)
  location: class ArrayClassObj
ArrayClassObj.java:13: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class ArrayClassObj
ArrayNew.java:11: error: cannot find symbol
    print("length of a = " + a.length);
    ^
  symbol:   method print(String)
  location: class ArrayNew
ArrayNew.java:12: error: cannot find symbol
    print(Arrays.toString(a));
    ^
  symbol:   method print(String)
  location: class ArrayNew
ArraysOfPrimitives.java:12: error: cannot find symbol
      print("a1[" + i + "] = " + a1[i]);
      ^
  symbol:   method print(String)
  location: class ArraysOfPrimitives
Demotion.java:6: error: cannot find symbol
  void f1(char x) { print("f1(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:7: error: cannot find symbol
  void f1(byte x) { print("f1(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:8: error: cannot find symbol
  void f1(short x) { print("f1(short)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:9: error: cannot find symbol
  void f1(int x) { print("f1(int)"); }
                   ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:10: error: cannot find symbol
  void f1(long x) { print("f1(long)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:11: error: cannot find symbol
  void f1(float x) { print("f1(float)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:12: error: cannot find symbol
  void f1(double x) { print("f1(double)"); }
                      ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:14: error: cannot find symbol
  void f2(char x) { print("f2(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:15: error: cannot find symbol
  void f2(byte x) { print("f2(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:16: error: cannot find symbol
  void f2(short x) { print("f2(short)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:17: error: cannot find symbol
  void f2(int x) { print("f2(int)"); }
                   ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:18: error: cannot find symbol
  void f2(long x) { print("f2(long)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:19: error: cannot find symbol
  void f2(float x) { print("f2(float)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:21: error: cannot find symbol
  void f3(char x) { print("f3(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:22: error: cannot find symbol
  void f3(byte x) { print("f3(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:23: error: cannot find symbol
  void f3(short x) { print("f3(short)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:24: error: cannot find symbol
  void f3(int x) { print("f3(int)"); }
                   ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:25: error: cannot find symbol
  void f3(long x) { print("f3(long)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:27: error: cannot find symbol
  void f4(char x) { print("f4(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:28: error: cannot find symbol
  void f4(byte x) { print("f4(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:29: error: cannot find symbol
  void f4(short x) { print("f4(short)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:30: error: cannot find symbol
  void f4(int x) { print("f4(int)"); }
                   ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:32: error: cannot find symbol
  void f5(char x) { print("f5(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:33: error: cannot find symbol
  void f5(byte x) { print("f5(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:34: error: cannot find symbol
  void f5(short x) { print("f5(short)"); }
                     ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:36: error: cannot find symbol
  void f6(char x) { print("f6(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:37: error: cannot find symbol
  void f6(byte x) { print("f6(byte)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:39: error: cannot find symbol
  void f7(char x) { print("f7(char)"); }
                    ^
  symbol:   method print(String)
  location: class Demotion
Demotion.java:43: error: cannot find symbol
    print("double argument:");
    ^
  symbol:   method print(String)
  location: class Demotion
ExplicitStatic.java:7: error: cannot find symbol
    print("Cup(" + marker + ")");
    ^
  symbol:   method print(String)
  location: class Cup
ExplicitStatic.java:10: error: cannot find symbol
    print("f(" + marker + ")");
    ^
  symbol:   method print(String)
  location: class Cup
ExplicitStatic.java:22: error: cannot find symbol
    print("Cups()");
    ^
  symbol:   method print(String)
  location: class Cups
ExplicitStatic.java:28: error: cannot find symbol
    print("Inside main()");
    ^
  symbol:   method print(String)
  location: class ExplicitStatic
Flower.java:10: error: cannot find symbol
    print("Constructor w/ int arg only, petalCount= "
    ^
  symbol:   method print(String)
  location: class Flower
Flower.java:14: error: cannot find symbol
    print("Constructor w/ String arg only, s = " + ss);
    ^
  symbol:   method print(String)
  location: class Flower
Flower.java:21: error: cannot find symbol
    print("String & int args");
    ^
  symbol:   method print(String)
  location: class Flower
Flower.java:25: error: cannot find symbol
    print("default constructor (no args)");
    ^
  symbol:   method print(String)
  location: class Flower
Flower.java:29: error: cannot find symbol
    print("petalCount = " + petalCount + " s = "+ s);
    ^
  symbol:   method print(String)
  location: class Flower
InitialValues.java:16: error: cannot find symbol
    print("Data type      Initial value");
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:17: error: cannot find symbol
    print("boolean        " + t);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:18: error: cannot find symbol
    print("char           [" + c + "]");
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:19: error: cannot find symbol
    print("byte           " + b);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:20: error: cannot find symbol
    print("short          " + s);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:21: error: cannot find symbol
    print("int            " + i);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:22: error: cannot find symbol
    print("long           " + l);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:23: error: cannot find symbol
    print("float          " + f);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:24: error: cannot find symbol
    print("double         " + d);
    ^
  symbol:   method print(String)
  location: class InitialValues
InitialValues.java:25: error: cannot find symbol
    print("reference      " + reference);
    ^
  symbol:   method print(String)
  location: class InitialValues
Mugs.java:7: error: cannot find symbol
    print("Mug(" + marker + ")");
    ^
  symbol:   method print(String)
  location: class Mug
Mugs.java:10: error: cannot find symbol
    print("f(" + marker + ")");
    ^
  symbol:   method print(String)
  location: class Mug
Mugs.java:20: error: cannot find symbol
    print("mug1 & mug2 initialized");
    ^
  symbol:   method print(String)
  location: class Mugs
Mugs.java:23: error: cannot find symbol
    print("Mugs()");
    ^
  symbol:   method print(String)
  location: class Mugs
Mugs.java:26: error: cannot find symbol
    print("Mugs(int)");
    ^
  symbol:   method print(String)
  location: class Mugs
Mugs.java:29: error: cannot find symbol
    print("Inside main()");
    ^
  symbol:   method print(String)
  location: class Mugs
Mugs.java:31: error: cannot find symbol
    print("new Mugs() completed");
    ^
  symbol:   method print(String)
  location: class Mugs
Mugs.java:33: error: cannot find symbol
    print("new Mugs(1) completed");
    ^
  symbol:   method print(String)
  location: class Mugs
NewVarArgs.java:16: warning: auxiliary class A in VarArgs.java should not be accessed from outside its own source file
    printArray(new A(), new A(), new A());
                   ^
NewVarArgs.java:16: warning: auxiliary class A in VarArgs.java should not be accessed from outside its own source file
    printArray(new A(), new A(), new A());
                            ^
NewVarArgs.java:16: warning: auxiliary class A in VarArgs.java should not be accessed from outside its own source file
    printArray(new A(), new A(), new A());
                                     ^
OrderOfInitialization.java:8: error: cannot find symbol
  Window(int marker) { print("Window(" + marker + ")"); }
                       ^
  symbol:   method print(String)
  location: class Window
OrderOfInitialization.java:15: error: cannot find symbol
    print("House()");
    ^
  symbol:   method print(String)
  location: class House
OrderOfInitialization.java:19: error: cannot find symbol
  void f() { print("f()"); }
             ^
  symbol:   method print(String)
  location: class House
Overloading.java:9: error: cannot find symbol
    print("Planting a seedling");
    ^
  symbol:   method print(String)
  location: class Tree
Overloading.java:14: error: cannot find symbol
    print("Creating new Tree that is " +
    ^
  symbol:   method print(String)
  location: class Tree
Overloading.java:18: error: cannot find symbol
    print("Tree is " + height + " feet tall");
    ^
  symbol:   method print(String)
  location: class Tree
Overloading.java:21: error: cannot find symbol
    print(s + ": Tree is " + height + " feet tall");
    ^
  symbol:   method print(String)
  location: class Tree
OverloadingOrder.java:7: error: cannot find symbol
    print("String: " + s + ", int: " + i);
    ^
  symbol:   method print(String)
  location: class OverloadingOrder
OverloadingOrder.java:10: error: cannot find symbol
    print("int: " + i + ", String: " + s);
    ^
  symbol:   method print(String)
  location: class OverloadingOrder
OverloadingVarargs2.java:13: error: reference to f is ambiguous
    f('a', 'b');
    ^
  both method f(float,Character...) in OverloadingVarargs2 and method f(Character...) in OverloadingVarargs2 match
PrimitiveOverloading.java:6: error: cannot find symbol
  void f1(char x) { printnb("f1(char) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:7: error: cannot find symbol
  void f1(byte x) { printnb("f1(byte) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:8: error: cannot find symbol
  void f1(short x) { printnb("f1(short) "); }
                     ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:9: error: cannot find symbol
  void f1(int x) { printnb("f1(int) "); }
                   ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:10: error: cannot find symbol
  void f1(long x) { printnb("f1(long) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:11: error: cannot find symbol
  void f1(float x) { printnb("f1(float) "); }
                     ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:12: error: cannot find symbol
  void f1(double x) { printnb("f1(double) "); }
                      ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:14: error: cannot find symbol
  void f2(byte x) { printnb("f2(byte) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:15: error: cannot find symbol
  void f2(short x) { printnb("f2(short) "); }
                     ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:16: error: cannot find symbol
  void f2(int x) { printnb("f2(int) "); }
                   ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:17: error: cannot find symbol
  void f2(long x) { printnb("f2(long) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:18: error: cannot find symbol
  void f2(float x) { printnb("f2(float) "); }
                     ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:19: error: cannot find symbol
  void f2(double x) { printnb("f2(double) "); }
                      ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:21: error: cannot find symbol
  void f3(short x) { printnb("f3(short) "); }
                     ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:22: error: cannot find symbol
  void f3(int x) { printnb("f3(int) "); }
                   ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
PrimitiveOverloading.java:23: error: cannot find symbol
  void f3(long x) { printnb("f3(long) "); }
                    ^
  symbol:   method printnb(String)
  location: class PrimitiveOverloading
100 errors
6 warnings

========================================
./innerclasses
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AnonymousConstructor.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
BigEgg.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
BigEgg2.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Callbacks.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Factories.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Games.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
GreenhouseController.java:4: error: package innerclasses.controller does not exist
import innerclasses.controller.*;
^
GreenhouseControls.java:6: error: package innerclasses.controller does not exist
import innerclasses.controller.*;
^
GreenhouseControls.java:8: error: cannot find symbol
public class GreenhouseControls extends Controller {
                                        ^
  symbol: class Controller
GreenhouseControls.java:10: error: cannot find symbol
  public class LightOn extends Event {
                               ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:19: error: cannot find symbol
  public class LightOff extends Event {
                                ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:29: error: cannot find symbol
  public class WaterOn extends Event {
                               ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:39: error: cannot find symbol
  public class WaterOff extends Event {
                                ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:50: error: cannot find symbol
  public class ThermostatNight extends Event {
                                       ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:62: error: cannot find symbol
  public class ThermostatDay extends Event {
                                     ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:76: error: cannot find symbol
  public class Bell extends Event {
                            ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:83: error: cannot find symbol
  public class Restart extends Event {
                               ^
  symbol:   class Event
  location: class GreenhouseControls
GreenhouseControls.java:84: error: cannot find symbol
    private Event[] eventList;
            ^
  symbol:   class Event
  location: class GreenhouseControls.Restart
GreenhouseControls.java:85: error: cannot find symbol
    public Restart(long delayTime, Event[] eventList) {
                                   ^
  symbol:   class Event
  location: class GreenhouseControls.Restart
GreenhouseControls.java:103: error: cannot find symbol
  public static class Terminate extends Event {
                                        ^
  symbol:   class Event
  location: class GreenhouseControls
LocalInnerClass.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AnonymousConstructor.java:7: error: cannot find symbol
    print("Base constructor, i = " + i);
    ^
  symbol:   method print(String)
  location: class Base
AnonymousConstructor.java:15: error: cannot find symbol
      { print("Inside instance initializer"); }
        ^
  symbol: method print(String)
AnonymousConstructor.java:17: error: cannot find symbol
        print("In anonymous f()");
        ^
  symbol: method print(String)
BigEgg.java:8: error: cannot find symbol
    public Yolk() { print("Egg.Yolk()"); }
                    ^
  symbol:   method print(String)
  location: class Egg.Yolk
BigEgg.java:11: error: cannot find symbol
    print("New Egg()");
    ^
  symbol:   method print(String)
  location: class Egg
BigEgg.java:18: error: cannot find symbol
    public Yolk() { print("BigEgg.Yolk()"); }
                    ^
  symbol:   method print(String)
  location: class BigEgg.Yolk
BigEgg2.java:7: error: cannot find symbol
    public Yolk() { print("Egg2.Yolk()"); }
                    ^
  symbol:   method print(String)
  location: class Egg2.Yolk
BigEgg2.java:8: error: cannot find symbol
    public void f() { print("Egg2.Yolk.f()");}
                      ^
  symbol:   method print(String)
  location: class Egg2.Yolk
BigEgg2.java:11: error: cannot find symbol
  public Egg2() { print("New Egg2()"); }
                  ^
  symbol:   method print(String)
  location: class Egg2
BigEgg2.java:18: error: cannot find symbol
    public Yolk() { print("BigEgg2.Yolk()"); }
                    ^
  symbol:   method print(String)
  location: class BigEgg2.Yolk
BigEgg2.java:19: error: cannot find symbol
    public void f() { print("BigEgg2.Yolk.f()"); }
                      ^
  symbol:   method print(String)
  location: class BigEgg2.Yolk
Callbacks.java:15: error: cannot find symbol
    print(i);
    ^
  symbol:   method print(int)
  location: class Callee1
Callbacks.java:20: error: cannot find symbol
  public void increment() { print("Other operation"); }
                            ^
  symbol:   method print(String)
  location: class MyIncrement
Callbacks.java:31: error: cannot find symbol
    print(i);
    ^
  symbol:   method print(int)
  location: class Callee2
Factories.java:15: error: cannot find symbol
  public void method1() {print("Implementation1 method1");}
                         ^
  symbol:   method print(String)
  location: class Implementation1
Factories.java:16: error: cannot find symbol
  public void method2() {print("Implementation1 method2");}
                         ^
  symbol:   method print(String)
  location: class Implementation1
Factories.java:27: error: cannot find symbol
  public void method1() {print("Implementation2 method1");}
                         ^
  symbol:   method print(String)
  location: class Implementation2
Factories.java:28: error: cannot find symbol
  public void method2() {print("Implementation2 method2");}
                         ^
  symbol:   method print(String)
  location: class Implementation2
Games.java:13: error: cannot find symbol
    print("Checkers move " + moves);
    ^
  symbol:   method print(String)
  location: class Checkers
Games.java:26: error: cannot find symbol
    print("Chess move " + moves);
    ^
  symbol:   method print(String)
  location: class Chess
GreenhouseController.java:11: error: cannot find symbol
    gc.addEvent(gc.new Bell(900));
      ^
  symbol:   method addEvent(GreenhouseControls.Bell)
  location: variable gc of type GreenhouseControls
GreenhouseController.java:12: error: cannot find symbol
    Event[] eventList = {
    ^
  symbol:   class Event
  location: class GreenhouseController
GreenhouseController.java:20: error: cannot find symbol
    gc.addEvent(gc.new Restart(2000, eventList));
      ^
  symbol:   method addEvent(GreenhouseControls.Restart)
  location: variable gc of type GreenhouseControls
GreenhouseController.java:22: error: cannot find symbol
      gc.addEvent(
        ^
  symbol:   method addEvent(Terminate)
  location: variable gc of type GreenhouseControls
GreenhouseController.java:25: error: cannot find symbol
    gc.run();
      ^
  symbol:   method run()
  location: variable gc of type GreenhouseControls

========================================
./innerclasses/controller
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./interfaces
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Factories.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Games.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TestRandVals.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Factories.java:15: error: cannot find symbol
  public void method1() {print("Implementation1 method1");}
                         ^
  symbol:   method print(String)
  location: class Implementation1
Factories.java:16: error: cannot find symbol
  public void method2() {print("Implementation1 method2");}
                         ^
  symbol:   method print(String)
  location: class Implementation1
Factories.java:27: error: cannot find symbol
  public void method1() {print("Implementation2 method1");}
                         ^
  symbol:   method print(String)
  location: class Implementation2
Factories.java:28: error: cannot find symbol
  public void method2() {print("Implementation2 method2");}
                         ^
  symbol:   method print(String)
  location: class Implementation2
Games.java:12: error: cannot find symbol
    print("Checkers move " + moves);
    ^
  symbol:   method print(String)
  location: class Checkers
Games.java:25: error: cannot find symbol
    print("Chess move " + moves);
    ^
  symbol:   method print(String)
  location: class Chess
TestRandVals.java:6: error: cannot find symbol
    print(RandVals.RANDOM_INT);
    ^
  symbol:   method print(int)
  location: class TestRandVals
TestRandVals.java:7: error: cannot find symbol
    print(RandVals.RANDOM_LONG);
    ^
  symbol:   method print(long)
  location: class TestRandVals
TestRandVals.java:8: error: cannot find symbol
    print(RandVals.RANDOM_FLOAT);
    ^
  symbol:   method print(float)
  location: class TestRandVals
TestRandVals.java:9: error: cannot find symbol
    print(RandVals.RANDOM_DOUBLE);
    ^
  symbol:   method print(double)
  location: class TestRandVals
13 errors
3 warnings

========================================
./interfaces/classprocessor
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Apply.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Apply.java:34: error: cannot find symbol
    print("Using Processor " + p.name());
    ^
  symbol:   method print(String)
  location: class Apply
Apply.java:35: error: cannot find symbol
    print(p.process(s));
    ^
  symbol:   method print(Object)
  location: class Apply
3 errors
3 warnings

========================================
./interfaces/filters
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./interfaces/interfaceprocessor
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Apply.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
FilterProcessor.java:3: error: package interfaces.filters does not exist
import interfaces.filters.*;
^
FilterProcessor.java:6: error: cannot find symbol
  Filter filter;
  ^
  symbol:   class Filter
  location: class FilterAdapter
FilterProcessor.java:7: error: cannot find symbol
  public FilterAdapter(Filter filter) {
                       ^
  symbol:   class Filter
  location: class FilterAdapter
FilterProcessor.java:11: error: cannot find symbol
  public Waveform process(Object input) {
         ^
  symbol:   class Waveform
  location: class FilterAdapter
Apply.java:7: error: cannot find symbol
    print("Using Processor " + p.name());
    ^
  symbol:   method print(String)
  location: class Apply
Apply.java:8: error: cannot find symbol
    print(p.process(s));
    ^
  symbol:   method print(Object)
  location: class Apply
FilterProcessor.java:12: error: cannot find symbol
    return filter.process((Waveform)input);
                           ^
  symbol:   class Waveform
  location: class FilterAdapter
FilterProcessor.java:18: error: cannot find symbol
    Waveform w = new Waveform();
    ^
  symbol:   class Waveform
  location: class FilterProcessor
FilterProcessor.java:18: error: cannot find symbol
    Waveform w = new Waveform();
                     ^
  symbol:   class Waveform
  location: class FilterProcessor
FilterProcessor.java:19: error: cannot find symbol
    Apply.process(new FilterAdapter(new LowPass(1.0)), w);
                                        ^
  symbol:   class LowPass
  location: class FilterProcessor
FilterProcessor.java:20: error: cannot find symbol
    Apply.process(new FilterAdapter(new HighPass(2.0)), w);
                                        ^
  symbol:   class HighPass
  location: class FilterProcessor
FilterProcessor.java:22: error: cannot find symbol
      new FilterAdapter(new BandPass(3.0, 4.0)), w);
                            ^
  symbol:   class BandPass
  location: class FilterProcessor
13 errors
3 warnings

========================================
./interfaces/music4
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Music4.java:4: error: package polymorphism.music does not exist
import polymorphism.music.Note;
                         ^
Music4.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Music4.java:9: error: cannot find symbol
  public abstract void play(Note n);
                            ^
  symbol:   class Note
  location: class Instrument
Music4.java:15: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Wind
Music4.java:23: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Percussion
Music4.java:31: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Stringed
Music4.java:39: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Brass
Music4.java:46: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Woodwind
Music4.java:42: error: cannot find symbol
  public void adjust() { print("Brass.adjust()"); }
                         ^
  symbol:   method print(String)
  location: class Brass
Music4.java:57: error: cannot find symbol
    i.play(Note.MIDDLE_C);
           ^
  symbol:   variable Note
  location: class Music4
10 errors
3 warnings

========================================
./interfaces/music5
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Music5.java:4: error: package polymorphism.music does not exist
import polymorphism.music.Note;
                         ^
Music5.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Music5.java:11: error: cannot find symbol
  void play(Note n); // Automatically public
            ^
  symbol:   class Note
  location: interface Instrument
Music5.java:16: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Wind
Music5.java:24: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Percussion
Music5.java:32: error: cannot find symbol
  public void play(Note n) {
                   ^
  symbol:   class Note
  location: class Stringed
Music5.java:20: error: cannot find symbol
  public void adjust() { print(this + ".adjust()"); }
                         ^
  symbol:   method print(String)
  location: class Wind
Music5.java:28: error: cannot find symbol
  public void adjust() { print(this + ".adjust()"); }
                         ^
  symbol:   method print(String)
  location: class Percussion
Music5.java:36: error: cannot find symbol
  public void adjust() { print(this + ".adjust()"); }
                         ^
  symbol:   method print(String)
  location: class Stringed
Music5.java:52: error: cannot find symbol
    i.play(Note.MIDDLE_C);
           ^
  symbol:   variable Note
  location: class Music5
10 errors
3 warnings

========================================
./interfaces/nesting
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./io
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AvailableCharSets.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Blip3.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Blips.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
DirectoryDemo.java:4: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
DirectoryDemo.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Endians.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
GetData.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
LargeMappedFiles.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Logon.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MyWorld.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
OSExecuteDemo.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PreferencesDemo.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
UsingBuffers.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ViewBuffers.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Worm.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ZipCompress.java:8: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AvailableCharSets.java:14: error: cannot find symbol
      printnb(csName);
      ^
  symbol:   method printnb(String)
  location: class AvailableCharSets
AvailableCharSets.java:15: warning: [rawtypes] found raw type: Iterator
      Iterator aliases =
      ^
  missing type arguments for generic class Iterator<E>
  where E is a type-variable:
    E extends Object declared in interface Iterator
AvailableCharSets.java:18: error: cannot find symbol
        printnb(": ");
        ^
  symbol:   method printnb(String)
  location: class AvailableCharSets
AvailableCharSets.java:20: error: cannot find symbol
        printnb(aliases.next());
        ^
  symbol:   method printnb(Object)
  location: class AvailableCharSets
AvailableCharSets.java:22: error: cannot find symbol
          printnb(", ");
          ^
  symbol:   method printnb(String)
  location: class AvailableCharSets
AvailableCharSets.java:24: error: cannot find symbol
      print();
      ^
  symbol:   method print()
  location: class AvailableCharSets
Blip3.java:10: error: cannot find symbol
    print("Blip3 Constructor");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:14: error: cannot find symbol
    print("Blip3(String x, int a)");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:22: error: cannot find symbol
    print("Blip3.writeExternal");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:29: error: cannot find symbol
    print("Blip3.readExternal");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:36: error: cannot find symbol
    print("Constructing objects:");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:38: error: cannot find symbol
    print(b3);
    ^
  symbol:   method print(Blip3)
  location: class Blip3
Blip3.java:41: error: cannot find symbol
    print("Saving object:");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:47: error: cannot find symbol
    print("Recovering b3:");
    ^
  symbol:   method print(String)
  location: class Blip3
Blip3.java:49: error: cannot find symbol
    print(b3);
    ^
  symbol:   method print(Blip3)
  location: class Blip3
Blips.java:8: error: cannot find symbol
    print("Blip1 Constructor");
    ^
  symbol:   method print(String)
  location: class Blip1
Blips.java:12: error: cannot find symbol
    print("Blip1.writeExternal");
    ^
  symbol:   method print(String)
  location: class Blip1
Blips.java:16: error: cannot find symbol
    print("Blip1.readExternal");
    ^
  symbol:   method print(String)
  location: class Blip1
Blips.java:22: error: cannot find symbol
    print("Blip2 Constructor");
    ^
  symbol:   method print(String)
  location: class Blip2
Blips.java:26: error: cannot find symbol
    print("Blip2.writeExternal");
    ^
  symbol:   method print(String)
  location: class Blip2
Blips.java:30: error: cannot find symbol
    print("Blip2.readExternal");
    ^
  symbol:   method print(String)
  location: class Blip2
Blips.java:37: error: cannot find symbol
    print("Constructing objects:");
    ^
  symbol:   method print(String)
  location: class Blips
Blips.java:42: error: cannot find symbol
    print("Saving objects:");
    ^
  symbol:   method print(String)
  location: class Blips
Blips.java:49: error: cannot find symbol
    print("Recovering b1:");
    ^
  symbol:   method print(String)
  location: class Blips
DirectoryDemo.java:10: error: cannot find symbol
    PPrint.pprint(Directory.walk(".").dirs);
                  ^
  symbol:   variable Directory
  location: class DirectoryDemo
DirectoryDemo.java:10: error: cannot find symbol
    PPrint.pprint(Directory.walk(".").dirs);
    ^
  symbol:   variable PPrint
  location: class DirectoryDemo
DirectoryDemo.java:12: error: cannot find symbol
    for(File file : Directory.local(".", "T.*"))
                    ^
  symbol:   variable Directory
  location: class DirectoryDemo
DirectoryDemo.java:13: error: cannot find symbol
      print(file);
      ^
  symbol:   method print(File)
  location: class DirectoryDemo
DirectoryDemo.java:14: error: cannot find symbol
    print("----------------------");
    ^
  symbol:   method print(String)
  location: class DirectoryDemo
DirectoryDemo.java:16: error: cannot find symbol
    for(File file : Directory.walk(".", "T.*\\.java"))
                    ^
  symbol:   variable Directory
  location: class DirectoryDemo
DirectoryDemo.java:17: error: cannot find symbol
      print(file);
      ^
  symbol:   method print(File)
  location: class DirectoryDemo
DirectoryDemo.java:18: error: cannot find symbol
    print("======================");
    ^
  symbol:   method print(String)
  location: class DirectoryDemo
DirectoryDemo.java:20: error: cannot find symbol
    for(File file : Directory.walk(".",".*[Zz].*\\.class"))
                    ^
  symbol:   variable Directory
  location: class DirectoryDemo
DirectoryDemo.java:21: error: cannot find symbol
      print(file);
      ^
  symbol:   method print(File)
  location: class DirectoryDemo
Endians.java:11: error: cannot find symbol
    print(Arrays.toString(bb.array()));
    ^
  symbol:   method print(String)
  location: class Endians
Endians.java:15: error: cannot find symbol
    print(Arrays.toString(bb.array()));
    ^
  symbol:   method print(String)
  location: class Endians
Endians.java:19: error: cannot find symbol
    print(Arrays.toString(bb.array()));
    ^
  symbol:   method print(String)
  location: class Endians
GetData.java:14: error: cannot find symbol
        print("nonzero");
        ^
  symbol:   method print(String)
  location: class GetData
GetData.java:15: error: cannot find symbol
    print("i = " + i);
    ^
  symbol:   method print(String)
  location: class GetData
GetData.java:21: error: cannot find symbol
      printnb(c + " ");
      ^
  symbol:   method printnb(String)
  location: class GetData
GetData.java:22: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class GetData
GetData.java:26: error: cannot find symbol
    print(bb.getShort());
    ^
  symbol:   method print(short)
  location: class GetData
GetData.java:30: error: cannot find symbol
    print(bb.getInt());
    ^
  symbol:   method print(int)
  location: class GetData
GetData.java:34: error: cannot find symbol
    print(bb.getLong());
    ^
  symbol:   method print(long)
  location: class GetData
GetData.java:38: error: cannot find symbol
    print(bb.getFloat());
    ^
  symbol:   method print(float)
  location: class GetData
GetData.java:42: error: cannot find symbol
    print(bb.getDouble());
    ^
  symbol:   method print(double)
  location: class GetData
LargeMappedFiles.java:17: error: cannot find symbol
    print("Finished writing");
    ^
  symbol:   method print(String)
  location: class LargeMappedFiles
LargeMappedFiles.java:19: error: cannot find symbol
      printnb((char)out.get(i));
      ^
  symbol:   method printnb(char)
  location: class LargeMappedFiles
Logon.java:22: error: cannot find symbol
    print("logon a = " + a);
    ^
  symbol:   method print(String)
  location: class Logon
Logon.java:31: error: cannot find symbol
    print("Recovering object at " + new Date());
    ^
  symbol:   method print(String)
  location: class Logon
Logon.java:33: error: cannot find symbol
    print("logon a = " + a);
    ^
  symbol:   method print(String)
  location: class Logon
MyWorld.java:29: error: cannot find symbol
    print("animals: " + animals);
    ^
  symbol:   method print(String)
  location: class MyWorld
MyWorld.java:45: warning: [rawtypes] found raw type: List
    List
    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
MyWorld.java:45: warning: [rawtypes] found raw type: List
    List
    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
MyWorld.java:45: warning: [rawtypes] found raw type: List
    List
    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List
MyWorld.java:49: error: cannot find symbol
    print("animals1: " + animals1);
    ^
  symbol:   method print(String)
  location: class MyWorld
MyWorld.java:50: error: cannot find symbol
    print("animals2: " + animals2);
    ^
  symbol:   method print(String)
  location: class MyWorld
MyWorld.java:51: error: cannot find symbol
    print("animals3: " + animals3);
    ^
  symbol:   method print(String)
  location: class MyWorld
OSExecuteDemo.java:7: error: cannot find symbol
    OSExecute.command("javap OSExecuteDemo");
    ^
  symbol:   variable OSExecute
  location: class OSExecuteDemo
PreferencesDemo.java:17: error: cannot find symbol
      print(key + ": "+ prefs.get(key, null));
      ^
  symbol:   method print(String)
  location: class PreferencesDemo
PreferencesDemo.java:19: error: cannot find symbol
    print("How many companions does Dorothy have? " +
    ^
  symbol:   method print(String)
  location: class PreferencesDemo
RecoverCADState.java:13: warning: auxiliary class Shape in StoreCADState.java should not be accessed from outside its own source file
    List<Class<? extends Shape>> shapeTypes =
                         ^
RecoverCADState.java:14: warning: auxiliary class Shape in StoreCADState.java should not be accessed from outside its own source file
      (List<Class<? extends Shape>>)in.readObject();
                            ^
RecoverCADState.java:15: warning: auxiliary class Line in StoreCADState.java should not be accessed from outside its own source file
    Line.deserializeStaticState(in);
    ^
RecoverCADState.java:16: warning: auxiliary class Shape in StoreCADState.java should not be accessed from outside its own source file
    List<Shape> shapes = (List<Shape>)in.readObject();
         ^
RecoverCADState.java:16: warning: auxiliary class Shape in StoreCADState.java should not be accessed from outside its own source file
    List<Shape> shapes = (List<Shape>)in.readObject();
                               ^
StoreCADState.java:84: warning: [cast] redundant cast to Shape
      ((Shape)shapes.get(i)).setColor(Shape.GREEN);
       ^
UsingBuffers.java:20: error: cannot find symbol
    print(cb.rewind());
    ^
  symbol:   method print(Buffer)
  location: class UsingBuffers
UsingBuffers.java:22: error: cannot find symbol
    print(cb.rewind());
    ^
  symbol:   method print(Buffer)
  location: class UsingBuffers
UsingBuffers.java:24: error: cannot find symbol
    print(cb.rewind());
    ^
  symbol:   method print(Buffer)
  location: class UsingBuffers
ViewBuffers.java:10: error: cannot find symbol
    printnb("Byte Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:12: error: cannot find symbol
      printnb(bb.position()+ " -> " + bb.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:13: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:16: error: cannot find symbol
    printnb("Char Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:18: error: cannot find symbol
      printnb(cb.position() + " -> " + cb.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:19: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:22: error: cannot find symbol
    printnb("Float Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:24: error: cannot find symbol
      printnb(fb.position()+ " -> " + fb.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:25: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:28: error: cannot find symbol
    printnb("Int Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:30: error: cannot find symbol
      printnb(ib.position()+ " -> " + ib.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:31: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:34: error: cannot find symbol
    printnb("Long Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:36: error: cannot find symbol
      printnb(lb.position()+ " -> " + lb.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:37: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:40: error: cannot find symbol
    printnb("Short Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:42: error: cannot find symbol
      printnb(sb.position()+ " -> " + sb.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:43: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class ViewBuffers
ViewBuffers.java:46: error: cannot find symbol
    printnb("Double Buffer ");
    ^
  symbol:   method printnb(String)
  location: class ViewBuffers
ViewBuffers.java:48: error: cannot find symbol
      printnb(db.position()+ " -> " + db.get() + ", ");
      ^
  symbol:   method printnb(String)
  location: class ViewBuffers
Worm.java:24: error: cannot find symbol
    print("Worm constructor: " + i);
    ^
  symbol:   method print(String)
  location: class Worm
Worm.java:30: error: cannot find symbol
    print("Default constructor");
    ^
  symbol:   method print(String)
  location: class Worm
Worm.java:46: error: cannot find symbol
    print("w = " + w);
    ^
  symbol:   method print(String)
  location: class Worm
Worm.java:56: error: cannot find symbol
    print(s + "w2 = " + w2);
    ^
  symbol:   method print(String)
  location: class Worm
ZipCompress.java:54: warning: [rawtypes] found raw type: Enumeration
    Enumeration e = zf.entries();
    ^
  missing type arguments for generic class Enumeration<E>
  where E is a type-variable:
    E extends Object declared in interface Enumeration
100 errors
14 warnings

========================================
./io/xfiles
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./net/mindview/atunit
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AtUnit.java:8: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnit.java:9: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AtUnit.java:11: error: package ProcessFiles does not exist
public class AtUnit implements ProcessFiles.Strategy {
                                           ^
AtUnitRemover.java:9: error: package javassist does not exist
import javassist.*;
^
AtUnitRemover.java:10: error: package javassist.expr does not exist
import javassist.expr.*;
^
AtUnitRemover.java:11: error: package javassist.bytecode does not exist
import javassist.bytecode.*;
^
AtUnitRemover.java:12: error: package javassist.bytecode.annotation does not exist
import javassist.bytecode.annotation.*;
^
AtUnitRemover.java:15: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
AtUnitRemover.java:16: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AtUnitRemover.java:19: error: package ProcessFiles does not exist
implements ProcessFiles.Strategy {
                       ^
ClassNameFinder.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ClassNameFinder.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AtUnit.java:19: error: cannot find symbol
    new ProcessFiles(new AtUnit(), "class").start(args);
        ^
  symbol:   class ProcessFiles
  location: class AtUnit
AtUnit.java:21: error: cannot find symbol
      print("OK (" + testsRun + " tests)");
      ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:23: error: cannot find symbol
      print("(" + testsRun + " tests)");
      ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:24: error: cannot find symbol
      print("\n>>> " + failures + " FAILURE" +
      ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:27: error: cannot find symbol
        print("  " + failed);
        ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:33: error: cannot find symbol
        BinaryFile.read(cFile));
        ^
  symbol:   variable BinaryFile
  location: class AtUnit
AtUnit.java:55: error: cannot find symbol
            print("Error: " + testClass +
            ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:62: error: cannot find symbol
      print(testClass.getName());
      ^
  symbol:   method print(String)
  location: class AtUnit
AtUnit.java:65: error: cannot find symbol
      printnb("  . " + m.getName() + " ");
      ^
  symbol:   method printnb(String)
  location: class AtUnit
AtUnit.java:78: error: cannot find symbol
          print(e.getCause());
          ^
  symbol:   method print(Throwable)
  location: class AtUnit
AtUnit.java:80: error: cannot find symbol
        print(success ? "" : "(failed)");
        ^
  symbol:   method print(String)
  location: class AtUnit
AtUnitRemover.java:28: error: cannot find symbol
    new ProcessFiles(
        ^
  symbol:   class ProcessFiles
  location: class AtUnitRemover
AtUnitRemover.java:35: error: cannot find symbol
        BinaryFile.read(cFile));
        ^
  symbol:   variable BinaryFile
  location: class AtUnitRemover
AtUnitRemover.java:38: error: cannot find symbol
      ClassPool cPool = ClassPool.getDefault();
      ^
  symbol:   class ClassPool
  location: class AtUnitRemover
AtUnitRemover.java:38: error: cannot find symbol
      ClassPool cPool = ClassPool.getDefault();
                        ^
  symbol:   variable ClassPool
  location: class AtUnitRemover
AtUnitRemover.java:39: error: cannot find symbol
      CtClass ctClass = cPool.get(cName);
      ^
  symbol:   class CtClass
  location: class AtUnitRemover
AtUnitRemover.java:40: error: cannot find symbol
      for(CtMethod method : ctClass.getDeclaredMethods()) {
          ^
  symbol:   class CtMethod
  location: class AtUnitRemover
AtUnitRemover.java:41: error: cannot find symbol
        MethodInfo mi = method.getMethodInfo();
        ^
  symbol:   class MethodInfo
  location: class AtUnitRemover
AtUnitRemover.java:42: error: cannot find symbol
        AnnotationsAttribute attr = (AnnotationsAttribute)
        ^
  symbol:   class AnnotationsAttribute
  location: class AtUnitRemover
AtUnitRemover.java:42: error: cannot find symbol
        AnnotationsAttribute attr = (AnnotationsAttribute)
                                     ^
  symbol:   class AnnotationsAttribute
  location: class AtUnitRemover
AtUnitRemover.java:43: error: cannot find symbol
          mi.getAttribute(AnnotationsAttribute.visibleTag);
                          ^
  symbol:   variable AnnotationsAttribute
  location: class AtUnitRemover
AtUnitRemover.java:45: error: cannot find symbol
        for(Annotation ann : attr.getAnnotations()) {
            ^
  symbol:   class Annotation
  location: class AtUnitRemover
ClassNameFinder.java:71: error: cannot find symbol
        print(thisClass(BinaryFile.read(new File(arg))));
                        ^
  symbol:   variable BinaryFile
  location: class ClassNameFinder
ClassNameFinder.java:74: error: cannot find symbol
      for(File klass : Directory.walk(".", ".*\\.class"))
                       ^
  symbol:   variable Directory
  location: class ClassNameFinder
ClassNameFinder.java:75: error: cannot find symbol
        print(thisClass(BinaryFile.read(klass)));
                        ^
  symbol:   variable BinaryFile
  location: class ClassNameFinder
37 errors
3 warnings

========================================
./net/mindview/simple
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./net/mindview/util
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./object
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./operators
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Assignment.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AutoInc.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
BitManipulation.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Bool.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CastingNumbers.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
HelloDate.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Literals.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
MathOps.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PassObject.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
RoundingNumbers.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ShortCircuit.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
StringOperators.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TernaryIfElse.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
URShift.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Assignment.java:15: error: cannot find symbol
    print("1: t1.level: " + t1.level +
    ^
  symbol:   method print(String)
  location: class Assignment
Assignment.java:18: error: cannot find symbol
    print("2: t1.level: " + t1.level +
    ^
  symbol:   method print(String)
  location: class Assignment
Assignment.java:21: error: cannot find symbol
    print("3: t1.level: " + t1.level +
    ^
  symbol:   method print(String)
  location: class Assignment
AutoInc.java:8: error: cannot find symbol
    print("i : " + i);
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:9: error: cannot find symbol
    print("++i : " + ++i); // Pre-increment
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:10: error: cannot find symbol
    print("i++ : " + i++); // Post-increment
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:11: error: cannot find symbol
    print("i : " + i);
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:12: error: cannot find symbol
    print("--i : " + --i); // Pre-decrement
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:13: error: cannot find symbol
    print("i-- : " + i--); // Post-decrement
    ^
  symbol:   method print(String)
  location: class AutoInc
AutoInc.java:14: error: cannot find symbol
    print("i : " + i);
    ^
  symbol:   method print(String)
  location: class AutoInc
BitManipulation.java:52: error: cannot find symbol
    print(s + ", int: " + i + ", binary:\n   " +
    ^
  symbol:   method print(String)
  location: class BitManipulation
BitManipulation.java:56: error: cannot find symbol
    print(s + ", long: " + l + ", binary:\n    " +
    ^
  symbol:   method print(String)
  location: class BitManipulation
Bool.java:11: error: cannot find symbol
    print("i = " + i);
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:12: error: cannot find symbol
    print("j = " + j);
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:13: error: cannot find symbol
    print("i > j is " + (i > j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:14: error: cannot find symbol
    print("i < j is " + (i < j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:15: error: cannot find symbol
    print("i >= j is " + (i >= j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:16: error: cannot find symbol
    print("i <= j is " + (i <= j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:17: error: cannot find symbol
    print("i == j is " + (i == j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:18: error: cannot find symbol
    print("i != j is " + (i != j));
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:23: error: cannot find symbol
    print("(i < 10) && (j < 10) is "
    ^
  symbol:   method print(String)
  location: class Bool
Bool.java:25: error: cannot find symbol
    print("(i < 10) || (j < 10) is "
    ^
  symbol:   method print(String)
  location: class Bool
CastingNumbers.java:10: error: cannot find symbol
    print("(int)above: " + (int)above);
    ^
  symbol:   method print(String)
  location: class CastingNumbers
CastingNumbers.java:11: error: cannot find symbol
    print("(int)below: " + (int)below);
    ^
  symbol:   method print(String)
  location: class CastingNumbers
CastingNumbers.java:12: error: cannot find symbol
    print("(int)fabove: " + (int)fabove);
    ^
  symbol:   method print(String)
  location: class CastingNumbers
CastingNumbers.java:13: error: cannot find symbol
    print("(int)fbelow: " + (int)fbelow);
    ^
  symbol:   method print(String)
  location: class CastingNumbers
HelloDate.java:7: error: cannot find symbol
    print("Hello, it's: ");
    ^
  symbol:   method print(String)
  location: class HelloDate
HelloDate.java:8: error: cannot find symbol
    print(new Date());
    ^
  symbol:   method print(Date)
  location: class HelloDate
Literals.java:7: error: cannot find symbol
    print("i1: " + Integer.toBinaryString(i1));
    ^
  symbol:   method print(String)
  location: class Literals
Literals.java:9: error: cannot find symbol
    print("i2: " + Integer.toBinaryString(i2));
    ^
  symbol:   method print(String)
  location: class Literals
Literals.java:11: error: cannot find symbol
    print("i3: " + Integer.toBinaryString(i3));
    ^
  symbol:   method print(String)
  location: class Literals
Literals.java:13: error: cannot find symbol
    print("c: " + Integer.toBinaryString(c));
    ^
  symbol:   method print(String)
  location: class Literals
Literals.java:15: error: cannot find symbol
    print("b: " + Integer.toBinaryString(b));
    ^
  symbol:   method print(String)
  location: class Literals
Literals.java:17: error: cannot find symbol
    print("s: " + Integer.toBinaryString(s));
    ^
  symbol:   method print(String)
  location: class Literals
MathOps.java:13: error: cannot find symbol
    print("j : " + j);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:15: error: cannot find symbol
    print("k : " + k);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:17: error: cannot find symbol
    print("j + k : " + i);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:19: error: cannot find symbol
    print("j - k : " + i);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:21: error: cannot find symbol
    print("k / j : " + i);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:23: error: cannot find symbol
    print("k * j : " + i);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:25: error: cannot find symbol
    print("k % j : " + i);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:27: error: cannot find symbol
    print("j %= k : " + j);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:31: error: cannot find symbol
    print("v : " + v);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:33: error: cannot find symbol
    print("w : " + w);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:35: error: cannot find symbol
    print("v + w : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:37: error: cannot find symbol
    print("v - w : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:39: error: cannot find symbol
    print("v * w : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:41: error: cannot find symbol
    print("v / w : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:45: error: cannot find symbol
    print("u += v : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:47: error: cannot find symbol
    print("u -= v : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:49: error: cannot find symbol
    print("u *= v : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
MathOps.java:51: error: cannot find symbol
    print("u /= v : " + u);
    ^
  symbol:   method print(String)
  location: class MathOps
PassObject.java:17: error: cannot find symbol
    print("1: x.c: " + x.c);
    ^
  symbol:   method print(String)
  location: class PassObject
PassObject.java:19: error: cannot find symbol
    print("2: x.c: " + x.c);
    ^
  symbol:   method print(String)
  location: class PassObject
RoundingNumbers.java:9: error: cannot find symbol
    print("Math.round(above): " + Math.round(above));
    ^
  symbol:   method print(String)
  location: class RoundingNumbers
RoundingNumbers.java:10: error: cannot find symbol
    print("Math.round(below): " + Math.round(below));
    ^
  symbol:   method print(String)
  location: class RoundingNumbers
RoundingNumbers.java:11: error: cannot find symbol
    print("Math.round(fabove): " + Math.round(fabove));
    ^
  symbol:   method print(String)
  location: class RoundingNumbers
RoundingNumbers.java:12: error: cannot find symbol
    print("Math.round(fbelow): " + Math.round(fbelow));
    ^
  symbol:   method print(String)
  location: class RoundingNumbers
ShortCircuit.java:8: error: cannot find symbol
    print("test1(" + val + ")");
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:9: error: cannot find symbol
    print("result: " + (val < 1));
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:13: error: cannot find symbol
    print("test2(" + val + ")");
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:14: error: cannot find symbol
    print("result: " + (val < 2));
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:18: error: cannot find symbol
    print("test3(" + val + ")");
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:19: error: cannot find symbol
    print("result: " + (val < 3));
    ^
  symbol:   method print(String)
  location: class ShortCircuit
ShortCircuit.java:24: error: cannot find symbol
    print("expression is " + b);
    ^
  symbol:   method print(String)
  location: class ShortCircuit
StringOperators.java:8: error: cannot find symbol
    print(s + x + y + z);
    ^
  symbol:   method print(String)
  location: class StringOperators
StringOperators.java:9: error: cannot find symbol
    print(x + " " + s); // Converts x to a String
    ^
  symbol:   method print(String)
  location: class StringOperators
StringOperators.java:11: error: cannot find symbol
    print(s + (x + y + z));
    ^
  symbol:   method print(String)
  location: class StringOperators
StringOperators.java:12: error: cannot find symbol
    print("" + x); // Shorthand for Integer.toString()
    ^
  symbol:   method print(String)
  location: class StringOperators
TernaryIfElse.java:15: error: cannot find symbol
    print(ternary(9));
    ^
  symbol:   method print(int)
  location: class TernaryIfElse
TernaryIfElse.java:16: error: cannot find symbol
    print(ternary(10));
    ^
  symbol:   method print(int)
  location: class TernaryIfElse
TernaryIfElse.java:17: error: cannot find symbol
    print(standardIfElse(9));
    ^
  symbol:   method print(int)
  location: class TernaryIfElse
TernaryIfElse.java:18: error: cannot find symbol
    print(standardIfElse(10));
    ^
  symbol:   method print(int)
  location: class TernaryIfElse
URShift.java:8: error: cannot find symbol
    print(Integer.toBinaryString(i));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:10: error: cannot find symbol
    print(Integer.toBinaryString(i));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:12: error: cannot find symbol
    print(Long.toBinaryString(l));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:14: error: cannot find symbol
    print(Long.toBinaryString(l));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:16: error: cannot find symbol
    print(Integer.toBinaryString(s));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:18: error: cannot find symbol
    print(Integer.toBinaryString(s));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:20: error: cannot find symbol
    print(Integer.toBinaryString(b));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:22: error: cannot find symbol
    print(Integer.toBinaryString(b));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:24: error: cannot find symbol
    print(Integer.toBinaryString(b));
    ^
  symbol:   method print(String)
  location: class URShift
URShift.java:25: error: cannot find symbol
    print(Integer.toBinaryString(b>>>10));
    ^
  symbol:   method print(String)
  location: class URShift
97 errors
3 warnings

========================================
./polymorphism
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Frog.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PolyConstructors.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PrivateOverride.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ReferenceCounting.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Sandwich.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Shapes.java:3: error: package polymorphism.shape does not exist
import polymorphism.shape.*;
^
Shapes.java:6: error: cannot find symbol
  private static RandomShapeGenerator gen =
                 ^
  symbol:   class RandomShapeGenerator
  location: class Shapes
Transmogrify.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Frog.java:10: error: cannot find symbol
    print("Creating Characteristic " + s);
    ^
  symbol:   method print(String)
  location: class Characteristic
Frog.java:13: error: cannot find symbol
    print("disposing Characteristic " + s);
    ^
  symbol:   method print(String)
  location: class Characteristic
Frog.java:21: error: cannot find symbol
    print("Creating Description " + s);
    ^
  symbol:   method print(String)
  location: class Description
Frog.java:24: error: cannot find symbol
    print("disposing Description " + s);
    ^
  symbol:   method print(String)
  location: class Description
Frog.java:34: error: cannot find symbol
    print("LivingCreature()");
    ^
  symbol:   method print(String)
  location: class LivingCreature
Frog.java:37: error: cannot find symbol
    print("LivingCreature dispose");
    ^
  symbol:   method print(String)
  location: class LivingCreature
Frog.java:48: error: cannot find symbol
  Animal() { print("Animal()"); }
             ^
  symbol:   method print(String)
  location: class Animal
Frog.java:50: error: cannot find symbol
    print("Animal dispose");
    ^
  symbol:   method print(String)
  location: class Animal
Frog.java:63: error: cannot find symbol
    print("Amphibian()");
    ^
  symbol:   method print(String)
  location: class Amphibian
Frog.java:66: error: cannot find symbol
    print("Amphibian dispose");
    ^
  symbol:   method print(String)
  location: class Amphibian
Frog.java:76: error: cannot find symbol
  public Frog() { print("Frog()"); }
                  ^
  symbol:   method print(String)
  location: class Frog
Frog.java:78: error: cannot find symbol
    print("Frog dispose");
    ^
  symbol:   method print(String)
  location: class Frog
Frog.java:85: error: cannot find symbol
    print("Bye!");
    ^
  symbol:   method print(String)
  location: class Frog
PolyConstructors.java:7: error: cannot find symbol
  void draw() { print("Glyph.draw()"); }
                ^
  symbol:   method print(String)
  location: class Glyph
PolyConstructors.java:9: error: cannot find symbol
    print("Glyph() before draw()");
    ^
  symbol:   method print(String)
  location: class Glyph
PolyConstructors.java:11: error: cannot find symbol
    print("Glyph() after draw()");
    ^
  symbol:   method print(String)
  location: class Glyph
PolyConstructors.java:19: error: cannot find symbol
    print("RoundGlyph.RoundGlyph(), radius = " + radius);
    ^
  symbol:   method print(String)
  location: class RoundGlyph
PolyConstructors.java:22: error: cannot find symbol
    print("RoundGlyph.draw(), radius = " + radius);
    ^
  symbol:   method print(String)
  location: class RoundGlyph
PrivateOverride.java:7: error: cannot find symbol
  private void f() { print("private f()"); }
                     ^
  symbol:   method print(String)
  location: class PrivateOverride
PrivateOverride.java:15: error: cannot find symbol
  public void f() { print("public f()"); }
                    ^
  symbol:   method print(String)
  location: class Derived
ReferenceCounting.java:10: error: cannot find symbol
    print("Creating " + this);
    ^
  symbol:   method print(String)
  location: class Shared
ReferenceCounting.java:15: error: cannot find symbol
      print("Disposing " + this);
      ^
  symbol:   method print(String)
  location: class Shared
ReferenceCounting.java:25: error: cannot find symbol
    print("Creating " + this);
    ^
  symbol:   method print(String)
  location: class Composing
ReferenceCounting.java:30: error: cannot find symbol
    print("disposing " + this);
    ^
  symbol:   method print(String)
  location: class Composing
Sandwich.java:7: error: cannot find symbol
  Meal() { print("Meal()"); }
           ^
  symbol:   method print(String)
  location: class Meal
Sandwich.java:11: error: cannot find symbol
  Bread() { print("Bread()"); }
            ^
  symbol:   method print(String)
  location: class Bread
Sandwich.java:15: error: cannot find symbol
  Cheese() { print("Cheese()"); }
             ^
  symbol:   method print(String)
  location: class Cheese
Sandwich.java:19: error: cannot find symbol
  Lettuce() { print("Lettuce()"); }
              ^
  symbol:   method print(String)
  location: class Lettuce
Sandwich.java:23: error: cannot find symbol
  Lunch() { print("Lunch()"); }
            ^
  symbol:   method print(String)
  location: class Lunch
Sandwich.java:27: error: cannot find symbol
  PortableLunch() { print("PortableLunch()");}
                    ^
  symbol:   method print(String)
  location: class PortableLunch
Sandwich.java:34: error: cannot find symbol
  public Sandwich() { print("Sandwich()"); }
                      ^
  symbol:   method print(String)
  location: class Sandwich
Shapes.java:7: error: cannot find symbol
    new RandomShapeGenerator();
        ^
  symbol:   class RandomShapeGenerator
  location: class Shapes
Shapes.java:9: error: cannot find symbol
    Shape[] s = new Shape[9];
    ^
  symbol:   class Shape
  location: class Shapes
Shapes.java:9: error: cannot find symbol
    Shape[] s = new Shape[9];
                    ^
  symbol:   class Shape
  location: class Shapes
Shapes.java:14: error: cannot find symbol
    for(Shape shp : s)
        ^
  symbol:   class Shape
  location: class Shapes
StaticPolymorphism.java:25: warning: [static] static method should be qualified by type name, StaticSuper, instead of by an expression
    System.out.println(sup.staticGet());
                          ^
Transmogrify.java:11: error: cannot find symbol
  public void act() { print("HappyActor"); }
                      ^
  symbol:   method print(String)
  location: class HappyActor
Transmogrify.java:15: error: cannot find symbol
  public void act() { print("SadActor"); }
                      ^
  symbol:   method print(String)
  location: class SadActor
45 errors
4 warnings

========================================
./polymorphism/music
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Instrument.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Music2.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Instrument.java:7: error: cannot find symbol
    print("Instrument.play()");
    ^
  symbol:   method print(String)
  location: class Instrument
Music2.java:8: error: cannot find symbol
    print("Stringed.play() " + n);
    ^
  symbol:   method print(String)
  location: class Stringed
Music2.java:14: error: cannot find symbol
    print("Brass.play() " + n);
    ^
  symbol:   method print(String)
  location: class Brass
5 errors
3 warnings

========================================
./polymorphism/music3
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Music3.java:4: error: package polymorphism.music does not exist
import polymorphism.music.Note;
                         ^
Music3.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Music3.java:8: error: cannot find symbol
  void play(Note n) { print("Instrument.play() " + n); }
            ^
  symbol:   class Note
  location: class Instrument
Music3.java:14: error: cannot find symbol
  void play(Note n) { print("Wind.play() " + n); }
            ^
  symbol:   class Note
  location: class Wind
Music3.java:20: error: cannot find symbol
  void play(Note n) { print("Percussion.play() " + n); }
            ^
  symbol:   class Note
  location: class Percussion
Music3.java:26: error: cannot find symbol
  void play(Note n) { print("Stringed.play() " + n); }
            ^
  symbol:   class Note
  location: class Stringed
Music3.java:32: error: cannot find symbol
  void play(Note n) { print("Brass.play() " + n); }
            ^
  symbol:   class Note
  location: class Brass
Music3.java:37: error: cannot find symbol
  void play(Note n) { print("Woodwind.play() " + n); }
            ^
  symbol:   class Note
  location: class Woodwind
Music3.java:10: error: cannot find symbol
  void adjust() { print("Adjusting Instrument"); }
                  ^
  symbol:   method print(String)
  location: class Instrument
Music3.java:16: error: cannot find symbol
  void adjust() { print("Adjusting Wind"); }
                  ^
  symbol:   method print(String)
  location: class Wind
Music3.java:22: error: cannot find symbol
  void adjust() { print("Adjusting Percussion"); }
                  ^
  symbol:   method print(String)
  location: class Percussion
Music3.java:28: error: cannot find symbol
  void adjust() { print("Adjusting Stringed"); }
                  ^
  symbol:   method print(String)
  location: class Stringed
Music3.java:33: error: cannot find symbol
  void adjust() { print("Adjusting Brass"); }
                  ^
  symbol:   method print(String)
  location: class Brass
Music3.java:46: error: cannot find symbol
    i.play(Note.MIDDLE_C);
           ^
  symbol:   variable Note
  location: class Music3
14 errors
3 warnings

========================================
./polymorphism/shape
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Circle.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Square.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Triangle.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Circle.java:6: error: cannot find symbol
  public void draw() { print("Circle.draw()"); }
                       ^
  symbol:   method print(String)
  location: class Circle
Circle.java:7: error: cannot find symbol
  public void erase() { print("Circle.erase()"); }
                        ^
  symbol:   method print(String)
  location: class Circle
Square.java:6: error: cannot find symbol
  public void draw() { print("Square.draw()"); }
                       ^
  symbol:   method print(String)
  location: class Square
Square.java:7: error: cannot find symbol
  public void erase() { print("Square.erase()"); }
                        ^
  symbol:   method print(String)
  location: class Square
Triangle.java:6: error: cannot find symbol
  public void draw() { print("Triangle.draw()"); }
                       ^
  symbol:   method print(String)
  location: class Triangle
Triangle.java:7: error: cannot find symbol
  public void erase() { print("Triangle.erase()"); }
                        ^
  symbol:   method print(String)
  location: class Triangle
9 errors
3 warnings

========================================
./reusing
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
Bath.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Beetle.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
CADSystem.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Cartoon.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Chess.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Detergent.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
FinalData.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
FinalOverridingIllusion.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Hide.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Lisa.java:4: warning: auxiliary class Homer in Hide.java should not be accessed from outside its own source file
class Lisa extends Homer {
                   ^
Lisa.java:5: warning: auxiliary class Milhouse in Hide.java should not be accessed from outside its own source file
  @Override void doh(Milhouse m) {
                     ^
Orc.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PlaceSetting.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Bath.java:8: error: cannot find symbol
    print("Soap()");
    ^
  symbol:   method print(String)
  location: class Soap
Bath.java:23: error: cannot find symbol
    print("Inside Bath()");
    ^
  symbol:   method print(String)
  location: class Bath
Bath.java:44: error: cannot find symbol
    print(b);
    ^
  symbol:   method print(Bath)
  location: class Bath
Beetle.java:9: error: cannot find symbol
    print("i = " + i + ", j = " + j);
    ^
  symbol:   method print(String)
  location: class Insect
Beetle.java:15: error: cannot find symbol
    print(s);
    ^
  symbol:   method print(String)
  location: class Insect
Beetle.java:23: error: cannot find symbol
    print("k = " + k);
    ^
  symbol:   method print(String)
  location: class Beetle
Beetle.java:24: error: cannot find symbol
    print("j = " + j);
    ^
  symbol:   method print(String)
  location: class Beetle
Beetle.java:29: error: cannot find symbol
    print("Beetle constructor");
    ^
  symbol:   method print(String)
  location: class Beetle
CADSystem.java:7: error: cannot find symbol
  Shape(int i) { print("Shape constructor"); }
                 ^
  symbol:   method print(String)
  location: class Shape
CADSystem.java:8: error: cannot find symbol
  void dispose() { print("Shape dispose"); }
                   ^
  symbol:   method print(String)
  location: class Shape
CADSystem.java:14: error: cannot find symbol
    print("Drawing Circle");
    ^
  symbol:   method print(String)
  location: class Circle
CADSystem.java:17: error: cannot find symbol
    print("Erasing Circle");
    ^
  symbol:   method print(String)
  location: class Circle
CADSystem.java:25: error: cannot find symbol
    print("Drawing Triangle");
    ^
  symbol:   method print(String)
  location: class Triangle
CADSystem.java:28: error: cannot find symbol
    print("Erasing Triangle");
    ^
  symbol:   method print(String)
  location: class Triangle
CADSystem.java:39: error: cannot find symbol
    print("Drawing Line: " + start + ", " + end);
    ^
  symbol:   method print(String)
  location: class Line
CADSystem.java:42: error: cannot find symbol
    print("Erasing Line: " + start + ", " + end);
    ^
  symbol:   method print(String)
  location: class Line
CADSystem.java:57: error: cannot find symbol
    print("Combined constructor");
    ^
  symbol:   method print(String)
  location: class CADSystem
CADSystem.java:60: error: cannot find symbol
    print("CADSystem.dispose()");
    ^
  symbol:   method print(String)
  location: class CADSystem
Cartoon.java:6: error: cannot find symbol
  Art() { print("Art constructor"); }
          ^
  symbol:   method print(String)
  location: class Art
Cartoon.java:10: error: cannot find symbol
  Drawing() { print("Drawing constructor"); }
              ^
  symbol:   method print(String)
  location: class Drawing
Cartoon.java:14: error: cannot find symbol
  public Cartoon() { print("Cartoon constructor"); }
                     ^
  symbol:   method print(String)
  location: class Cartoon
Chess.java:7: error: cannot find symbol
    print("Game constructor");
    ^
  symbol:   method print(String)
  location: class Game
Chess.java:14: error: cannot find symbol
    print("BoardGame constructor");
    ^
  symbol:   method print(String)
  location: class BoardGame
Chess.java:21: error: cannot find symbol
    print("Chess constructor");
    ^
  symbol:   method print(String)
  location: class Chess
Detergent.java:15: error: cannot find symbol
    print(x);
    ^
  symbol:   method print(Cleanser)
  location: class Cleanser
Detergent.java:34: error: cannot find symbol
    print(x);
    ^
  symbol:   method print(Detergent)
  location: class Detergent
Detergent.java:35: error: cannot find symbol
    print("Testing base class:");
    ^
  symbol:   method print(String)
  location: class Detergent
FinalData.java:41: error: cannot find symbol
    print(fd1);
    ^
  symbol:   method print(FinalData)
  location: class FinalData
FinalData.java:42: error: cannot find symbol
    print("Creating new FinalData");
    ^
  symbol:   method print(String)
  location: class FinalData
FinalData.java:44: error: cannot find symbol
    print(fd1);
    ^
  symbol:   method print(FinalData)
  location: class FinalData
FinalData.java:45: error: cannot find symbol
    print(fd2);
    ^
  symbol:   method print(FinalData)
  location: class FinalData
FinalOverridingIllusion.java:8: error: cannot find symbol
  private final void f() { print("WithFinals.f()"); }
                           ^
  symbol:   method print(String)
  location: class WithFinals
FinalOverridingIllusion.java:10: error: cannot find symbol
  private void g() { print("WithFinals.g()"); }
                     ^
  symbol:   method print(String)
  location: class WithFinals
FinalOverridingIllusion.java:15: error: cannot find symbol
    print("OverridingPrivate.f()");
    ^
  symbol:   method print(String)
  location: class OverridingPrivate
FinalOverridingIllusion.java:18: error: cannot find symbol
    print("OverridingPrivate.g()");
    ^
  symbol:   method print(String)
  location: class OverridingPrivate
FinalOverridingIllusion.java:24: error: cannot find symbol
    print("OverridingPrivate2.f()");
    ^
  symbol:   method print(String)
  location: class OverridingPrivate2
FinalOverridingIllusion.java:27: error: cannot find symbol
    print("OverridingPrivate2.g()");
    ^
  symbol:   method print(String)
  location: class OverridingPrivate2
Hide.java:8: error: cannot find symbol
    print("doh(char)");
    ^
  symbol:   method print(String)
  location: class Homer
Hide.java:12: error: cannot find symbol
    print("doh(float)");
    ^
  symbol:   method print(String)
  location: class Homer
Hide.java:21: error: cannot find symbol
    print("doh(Milhouse)");
    ^
  symbol:   method print(String)
  location: class Bart
Lisa.java:5: error: method does not override or implement a method from a supertype
  @Override void doh(Milhouse m) {
  ^
Orc.java:29: error: cannot find symbol
    print(orc);
    ^
  symbol:   method print(Orc)
  location: class Orc
Orc.java:31: error: cannot find symbol
    print(orc);
    ^
  symbol:   method print(Orc)
  location: class Orc
PlaceSetting.java:7: error: cannot find symbol
    print("Plate constructor");
    ^
  symbol:   method print(String)
  location: class Plate
PlaceSetting.java:14: error: cannot find symbol
    print("DinnerPlate constructor");
    ^
  symbol:   method print(String)
  location: class DinnerPlate
PlaceSetting.java:20: error: cannot find symbol
    print("Utensil constructor");
    ^
  symbol:   method print(String)
  location: class Utensil
PlaceSetting.java:27: error: cannot find symbol
    print("Spoon constructor");
    ^
  symbol:   method print(String)
  location: class Spoon
PlaceSetting.java:34: error: cannot find symbol
    print("Fork constructor");
    ^
  symbol:   method print(String)
  location: class Fork
PlaceSetting.java:41: error: cannot find symbol
    print("Knife constructor");
    ^
  symbol:   method print(String)
  location: class Knife
PlaceSetting.java:48: error: cannot find symbol
    print("Custom constructor");
    ^
  symbol:   method print(String)
  location: class Custom
PlaceSetting.java:63: error: cannot find symbol
    print("PlaceSetting constructor");
    ^
  symbol:   method print(String)
  location: class PlaceSetting
62 errors
5 warnings

========================================
./strings
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ArrayListDisplay.java:2: error: package generics.coffee does not exist
import generics.coffee.*;
^
Finding.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Groups.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
Immutable.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
JGrep.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Replacing.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SplitDemo.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
StartEnd.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TestRegularExpression.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
TheReplacements.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
TheReplacements.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ArrayListDisplay.java:7: error: cannot find symbol
    ArrayList<Coffee> coffees = new ArrayList<Coffee>();
              ^
  symbol:   class Coffee
  location: class ArrayListDisplay
ArrayListDisplay.java:7: error: cannot find symbol
    ArrayList<Coffee> coffees = new ArrayList<Coffee>();
                                              ^
  symbol:   class Coffee
  location: class ArrayListDisplay
ArrayListDisplay.java:8: error: cannot find symbol
    for(Coffee c : new CoffeeGenerator(10))
                       ^
  symbol:   class CoffeeGenerator
  location: class ArrayListDisplay
ArrayListDisplay.java:8: error: cannot find symbol
    for(Coffee c : new CoffeeGenerator(10))
        ^
  symbol:   class Coffee
  location: class ArrayListDisplay
Finding.java:10: error: cannot find symbol
      printnb(m.group() + " ");
      ^
  symbol:   method printnb(String)
  location: class Finding
Finding.java:11: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class Finding
Finding.java:14: error: cannot find symbol
      printnb(m.group() + " ");
      ^
  symbol:   method printnb(String)
  location: class Finding
Groups.java:21: error: cannot find symbol
        printnb("[" + m.group(j) + "]");
        ^
  symbol:   method printnb(String)
  location: class Groups
Groups.java:22: error: cannot find symbol
      print();
      ^
  symbol:   method print()
  location: class Groups
Immutable.java:10: error: cannot find symbol
    print(q); // howdy
    ^
  symbol:   method print(String)
  location: class Immutable
Immutable.java:12: error: cannot find symbol
    print(qq); // HOWDY
    ^
  symbol:   method print(String)
  location: class Immutable
Immutable.java:13: error: cannot find symbol
    print(q); // howdy
    ^
  symbol:   method print(String)
  location: class Immutable
JGrep.java:17: error: cannot find symbol
    for(String line : new TextFile(args[0])) {
                          ^
  symbol:   class TextFile
  location: class JGrep
Replacing.java:7: error: cannot find symbol
    print(s.replaceFirst("f\\w+", "located"));
    ^
  symbol:   method print(String)
  location: class Replacing
Replacing.java:8: error: cannot find symbol
    print(s.replaceAll("shrubbery|tree|herring","banana"));
    ^
  symbol:   method print(String)
  location: class Replacing
SplitDemo.java:10: error: cannot find symbol
    print(Arrays.toString(
    ^
  symbol:   method print(String)
  location: class SplitDemo
SplitDemo.java:13: error: cannot find symbol
    print(Arrays.toString(
    ^
  symbol:   method print(String)
  location: class SplitDemo
StartEnd.java:18: error: cannot find symbol
        print(regex);
        ^
  symbol:   method print(String)
  location: class Display
StartEnd.java:21: error: cannot find symbol
      print(message);
      ^
  symbol:   method print(String)
  location: class Display
StartEnd.java:40: error: cannot find symbol
      print("input : " + in);
      ^
  symbol:   method print(String)
  location: class StartEnd
TestRegularExpression.java:10: error: cannot find symbol
      print("Usage:\njava TestRegularExpression " +
      ^
  symbol:   method print(String)
  location: class TestRegularExpression
TestRegularExpression.java:14: error: cannot find symbol
    print("Input: \"" + args[0] + "\"");
    ^
  symbol:   method print(String)
  location: class TestRegularExpression
TestRegularExpression.java:16: error: cannot find symbol
      print("Regular expression: \"" + arg + "\"");
      ^
  symbol:   method print(String)
  location: class TestRegularExpression
TestRegularExpression.java:20: error: cannot find symbol
        print("Match \"" + m.group() + "\" at positions " +
        ^
  symbol:   method print(String)
  location: class TestRegularExpression
TheReplacements.java:14: error: cannot find symbol
    String s = TextFile.read("TheReplacements.java");
               ^
  symbol:   variable TextFile
  location: class TheReplacements
TheReplacements.java:26: error: cannot find symbol
    print(s);
    ^
  symbol:   method print(String)
  location: class TheReplacements
TheReplacements.java:37: error: cannot find symbol
    print(sbuf);
    ^
  symbol:   method print(StringBuffer)
  location: class TheReplacements
38 errors
3 warnings

========================================
./swt
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ColorBoxes.java:3: error: package swt.util does not exist
import swt.util.*;
^
ColorBoxes.java:4: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
ColorBoxes.java:5: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
ColorBoxes.java:6: error: package org.eclipse.swt.events does not exist
import org.eclipse.swt.events.*;
^
ColorBoxes.java:7: error: package org.eclipse.swt.graphics does not exist
import org.eclipse.swt.graphics.*;
^
ColorBoxes.java:8: error: package org.eclipse.swt.layout does not exist
import org.eclipse.swt.layout.*;
^
ColorBoxes.java:11: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
ColorBoxes.java:13: error: cannot find symbol
class CBox extends Canvas implements Runnable {
                   ^
  symbol: class Canvas
ColorBoxes.java:24: error: cannot find symbol
  private static RGB newColor() {
                 ^
  symbol:   class RGB
  location: class CBox
ColorBoxes.java:29: error: cannot find symbol
  private RGB cColor = newColor();
          ^
  symbol:   class RGB
  location: class CBox
ColorBoxes.java:30: error: cannot find symbol
  public CBox(Composite parent, int pause) {
              ^
  symbol:   class Composite
  location: class CBox
ColorBoxes.java:14: error: cannot find symbol
  class CBoxPaintListener implements PaintListener {
                                     ^
  symbol:   class PaintListener
  location: class CBox
ColorBoxes.java:15: error: cannot find symbol
    public void paintControl(PaintEvent e) {
                             ^
  symbol:   class PaintEvent
  location: class CBox.CBoxPaintListener
ColorBoxes.java:57: error: cannot find symbol
public class ColorBoxes implements SWTApplication {
                                   ^
  symbol: class SWTApplication
ColorBoxes.java:60: error: cannot find symbol
  public void createContents(Composite parent) {
                             ^
  symbol:   class Composite
  location: class ColorBoxes
DisplayEnvironment.java:2: error: package swt.util does not exist
import swt.util.*;
^
DisplayEnvironment.java:3: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
DisplayEnvironment.java:4: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
DisplayEnvironment.java:5: error: package org.eclipse.swt.layout does not exist
import org.eclipse.swt.layout.*;
^
DisplayEnvironment.java:8: error: cannot find symbol
public class DisplayEnvironment implements SWTApplication {
                                           ^
  symbol: class SWTApplication
DisplayEnvironment.java:9: error: cannot find symbol
  public void createContents(Composite parent) {
                             ^
  symbol:   class Composite
  location: class DisplayEnvironment
DisplayProperties.java:2: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
DisplayProperties.java:3: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
DisplayProperties.java:4: error: package org.eclipse.swt.layout does not exist
import org.eclipse.swt.layout.*;
^
HelloSWT.java:4: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
Menus.java:3: error: package swt.util does not exist
import swt.util.*;
^
Menus.java:4: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
Menus.java:5: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
Menus.java:7: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Menus.java:9: error: cannot find symbol
public class Menus implements SWTApplication {
                              ^
  symbol: class SWTApplication
Menus.java:10: error: cannot find symbol
  private static Shell shell;
                 ^
  symbol:   class Shell
  location: class Menus
Menus.java:11: error: cannot find symbol
  public void createContents(Composite parent) {
                             ^
  symbol:   class Composite
  location: class Menus
Menus.java:33: error: cannot find symbol
  static Listener listener = new Listener() {
         ^
  symbol:   class Listener
  location: class Menus
Menus.java:39: error: cannot find symbol
  addItem(Menu bar, Iterator<String> it, MenuItem mItem) {
          ^
  symbol:   class Menu
  location: class Menus
Menus.java:39: error: cannot find symbol
  addItem(Menu bar, Iterator<String> it, MenuItem mItem) {
                                         ^
  symbol:   class MenuItem
  location: class Menus
ShellsAreMainWindows.java:2: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
ShellsAreMainWindows.java:5: error: cannot find symbol
  static Shell[] shells = new Shell[10];
         ^
  symbol:   class Shell
  location: class ShellsAreMainWindows
SineWave.java:3: error: package swt.util does not exist
import swt.util.*;
^
SineWave.java:4: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
SineWave.java:5: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
SineWave.java:6: error: package org.eclipse.swt.events does not exist
import org.eclipse.swt.events.*;
^
SineWave.java:7: error: package org.eclipse.swt.layout does not exist
import org.eclipse.swt.layout.*;
^
SineWave.java:9: error: cannot find symbol
class SineDraw extends Canvas {
                       ^
  symbol: class Canvas
SineWave.java:15: error: cannot find symbol
  public SineDraw(Composite parent, int style) {
                  ^
  symbol:   class Composite
  location: class SineDraw
SineWave.java:51: error: cannot find symbol
public class SineWave implements SWTApplication {
                                 ^
  symbol: class SWTApplication
SineWave.java:53: error: cannot find symbol
  private Slider slider;
          ^
  symbol:   class Slider
  location: class SineWave
SineWave.java:54: error: cannot find symbol
  public void createContents(Composite parent) {
                             ^
  symbol:   class Composite
  location: class SineWave
TabbedPane.java:3: error: package swt.util does not exist
import swt.util.*;
^
TabbedPane.java:4: error: package org.eclipse.swt does not exist
import org.eclipse.swt.*;
^
TabbedPane.java:5: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
TabbedPane.java:6: error: package org.eclipse.swt.events does not exist
import org.eclipse.swt.events.*;
^
TabbedPane.java:7: error: package org.eclipse.swt.graphics does not exist
import org.eclipse.swt.graphics.*;
^
TabbedPane.java:8: error: package org.eclipse.swt.layout does not exist
import org.eclipse.swt.layout.*;
^
TabbedPane.java:9: error: package org.eclipse.swt.browser does not exist
import org.eclipse.swt.browser.*;
^
TabbedPane.java:11: error: cannot find symbol
public class TabbedPane implements SWTApplication {
                                   ^
  symbol: class SWTApplication
TabbedPane.java:12: error: cannot find symbol
  private static TabFolder folder;
                 ^
  symbol:   class TabFolder
  location: class TabbedPane
TabbedPane.java:13: error: cannot find symbol
  private static Shell shell;
                 ^
  symbol:   class Shell
  location: class TabbedPane
TabbedPane.java:14: error: cannot find symbol
  public void createContents(Composite parent) {
                             ^
  symbol:   class Composite
  location: class TabbedPane
TabbedPane.java:68: error: cannot find symbol
  private static Listener listener = new Listener() {
                 ^
  symbol:   class Listener
  location: class TabbedPane
TabbedPane.java:75: error: cannot find symbol
  private static void newButton(Composite composite,
                                ^
  symbol:   class Composite
  location: class TabbedPane
TabbedPane.java:109: error: cannot find symbol
    extends MouseAdapter implements MouseMoveListener {
            ^
  symbol:   class MouseAdapter
  location: class TabbedPane
TabbedPane.java:109: error: cannot find symbol
    extends MouseAdapter implements MouseMoveListener {
                                    ^
  symbol:   class MouseMoveListener
  location: class TabbedPane
TabbedPane.java:110: error: cannot find symbol
    private Point p = new Point(0, 0);
            ^
  symbol:   class Point
  location: class ScribbleMouseListener
TabbedPane.java:111: error: cannot find symbol
    public void mouseMove(MouseEvent e) {
                          ^
  symbol:   class MouseEvent
  location: class ScribbleMouseListener
TabbedPane.java:119: error: cannot find symbol
    public void mouseDown(MouseEvent e) { updatePoint(e); }
                          ^
  symbol:   class MouseEvent
  location: class ScribbleMouseListener
TabbedPane.java:120: error: cannot find symbol
    private void updatePoint(MouseEvent e) {
                             ^
  symbol:   class MouseEvent
  location: class ScribbleMouseListener
ColorBoxes.java:16: error: cannot find symbol
      Color color = new Color(e.display, cColor);
      ^
  symbol:   class Color
  location: class CBox.CBoxPaintListener
ColorBoxes.java:16: error: cannot find symbol
      Color color = new Color(e.display, cColor);
                        ^
  symbol:   class Color
  location: class CBox.CBoxPaintListener
ColorBoxes.java:18: error: cannot find symbol
      Point size = getSize();
      ^
  symbol:   class Point
  location: class CBox.CBoxPaintListener
ColorBoxes.java:18: error: cannot find symbol
      Point size = getSize();
                   ^
  symbol:   method getSize()
  location: class CBox.CBoxPaintListener
ColorBoxes.java:25: error: cannot find symbol
    return new RGB(rand.nextInt(255),
               ^
  symbol:   class RGB
  location: class CBox
ColorBoxes.java:31: error: cannot find symbol
    super(parent, SWT.NONE);
                  ^
  symbol:   variable SWT
  location: class CBox
ColorBoxes.java:33: error: cannot find symbol
    addPaintListener(new CBoxPaintListener());
    ^
  symbol:   method addPaintListener(CBox.CBoxPaintListener)
  location: class CBox
ColorBoxes.java:41: error: cannot find symbol
            try { redraw(); } catch(SWTException e) {}
                  ^
  symbol: method redraw()
ColorBoxes.java:41: error: cannot find symbol
            try { redraw(); } catch(SWTException e) {}
                                    ^
  symbol: class SWTException
ColorBoxes.java:39: error: cannot find symbol
        getDisplay().asyncExec(new Runnable() {
        ^
  symbol:   method getDisplay()
  location: class CBox
ColorBoxes.java:50: error: cannot find symbol
    } catch(SWTException e) {
            ^
  symbol:   class SWTException
  location: class CBox

========================================
./swt/util
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
SWTApplication.java:3: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
SWTApplication.java:6: error: cannot find symbol
  void createContents(Composite parent);
                      ^
  symbol:   class Composite
  location: interface SWTApplication
SWTConsole.java:3: error: package org.eclipse.swt.widgets does not exist
import org.eclipse.swt.widgets.*;
^
SWTConsole.java:8: error: cannot find symbol
    Display display = new Display();
    ^
  symbol:   class Display
  location: class SWTConsole
SWTConsole.java:8: error: cannot find symbol
    Display display = new Display();
                          ^
  symbol:   class Display
  location: class SWTConsole
SWTConsole.java:9: error: cannot find symbol
    Shell shell = new Shell(display);
    ^
  symbol:   class Shell
  location: class SWTConsole
SWTConsole.java:9: error: cannot find symbol
    Shell shell = new Shell(display);
                      ^
  symbol:   class Shell
  location: class SWTConsole
7 errors
3 warnings

========================================
./typeinfo
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
AnonymousImplementation.java:3: error: package typeinfo.interfacea does not exist
import typeinfo.interfacea.*;
^
AnonymousImplementation.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AnonymousImplementation.java:7: error: cannot find symbol
  public static A makeA() {
                ^
  symbol:   class A
  location: class AnonymousA
FamilyVsExactType.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
HiddenImplementation.java:3: error: package typeinfo.interfacea does not exist
import typeinfo.interfacea.*;
^
HiddenImplementation.java:4: error: package typeinfo.packageaccess does not exist
import typeinfo.packageaccess.*;
^
InnerImplementation.java:3: error: package typeinfo.interfacea does not exist
import typeinfo.interfacea.*;
^
InnerImplementation.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
InnerImplementation.java:14: error: cannot find symbol
  public static A makeA() { return new C(); }
                ^
  symbol:   class A
  location: class InnerA
InnerImplementation.java:7: error: cannot find symbol
  private static class C implements A {
                                    ^
  symbol:   class A
  location: class InnerA
InterfaceViolation.java:3: error: package typeinfo.interfacea does not exist
import typeinfo.interfacea.*;
^
InterfaceViolation.java:5: error: cannot find symbol
class B implements A {
                   ^
  symbol: class A
NullRobot.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Robot.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
NullRobot.java:13: error: cannot find symbol
  private class NRobot implements Null, Robot {
                                  ^
  symbol:   class Null
  location: class NullRobotProxyHandler
Person.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
Person.java:19: error: cannot find symbol
  extends Person implements Null {
                            ^
  symbol:   class Null
  location: class Person
PetCount.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
PetCount.java:5: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PetCount.java:18: error: cannot find symbol
  countPets(PetCreator creator) {
            ^
  symbol:   class PetCreator
  location: class PetCount
PetCount2.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
PetCount3.java:3: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
PetCount3.java:5: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PetCount3.java:6: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
PetCount3.java:10: error: cannot find symbol
  extends LinkedHashMap<Class<? extends Pet>,Integer> {
                                        ^
  symbol:   class Pet
  location: class PetCount3
PetCount3.java:14: error: cannot find symbol
    public void count(Pet pet) {
                      ^
  symbol:   class Pet
  location: class PetCounter
PetCount4.java:2: error: package typeinfo.pets does not exist
import typeinfo.pets.*;
^
PetCount4.java:3: error: package net.mindview.util does not exist
import net.mindview.util.*;
^
PetCount4.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
RegisteredFactories.java:3: error: package typeinfo.factory does not exist
import typeinfo.factory.*;
^
RegisteredFactories.java:10: error: cannot find symbol
  static List<Factory<? extends Part>> partFactories =
              ^
  symbol:   class Factory
  location: class Part
RegisteredFactories.java:35: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<FuelFilter> {
                             ^
RegisteredFactories.java:42: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<AirFilter> {
                             ^
RegisteredFactories.java:49: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<CabinAirFilter> {
                             ^
RegisteredFactories.java:58: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<OilFilter> {
                             ^
RegisteredFactories.java:67: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<FanBelt> {
                             ^
RegisteredFactories.java:74: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<GeneratorBelt> {
                             ^
RegisteredFactories.java:83: error: package typeinfo.factory does not exist
  implements typeinfo.factory.Factory<PowerSteeringBelt> {
                             ^
SelectingMethods.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
ShowMethods.java:7: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SimpleProxyDemo.java:2: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
SimpleDynamicProxy.java:22: warning: auxiliary class Interface in SimpleProxyDemo.java should not be accessed from outside its own source file
  public static void consumer(Interface iface) {
                              ^
SweetShop.java:3: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
AnonymousImplementation.java:8: error: cannot find symbol
    return new A() {
               ^
  symbol:   class A
  location: class AnonymousA
AnonymousImplementation.java:20: error: cannot find symbol
    A a = AnonymousA.makeA();
    ^
  symbol:   class A
  location: class AnonymousImplementation
ClassInitialization.java:30: warning: [rawtypes] found raw type: Class
    Class initable = Initable.class;
    ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ClassInitialization.java:38: warning: [rawtypes] found raw type: Class
    Class initable3 = Class.forName("Initable3");
    ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
FamilyVsExactType.java:11: error: cannot find symbol
    print("Testing x of type " + x.getClass());
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:12: error: cannot find symbol
    print("x instanceof Base " + (x instanceof Base));
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:13: error: cannot find symbol
    print("x instanceof Derived "+ (x instanceof Derived));
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:14: error: cannot find symbol
    print("Base.isInstance(x) "+ Base.class.isInstance(x));
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:15: error: cannot find symbol
    print("Derived.isInstance(x) " +
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:17: error: cannot find symbol
    print("x.getClass() == Base.class " +
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:19: error: cannot find symbol
    print("x.getClass() == Derived.class " +
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:21: error: cannot find symbol
    print("x.getClass().equals(Base.class)) "+
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
FamilyVsExactType.java:23: error: cannot find symbol
    print("x.getClass().equals(Derived.class)) " +
    ^
  symbol:   method print(String)
  location: class FamilyVsExactType
GenericClassReferences.java:5: warning: [rawtypes] found raw type: Class
    Class intClass = int.class;
    ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
HiddenImplementation.java:9: error: cannot find symbol
    A a = HiddenC.makeA();
    ^
  symbol:   class A
  location: class HiddenImplementation
HiddenImplementation.java:9: error: cannot find symbol
    A a = HiddenC.makeA();
          ^
  symbol:   variable HiddenC
  location: class HiddenImplementation
InnerImplementation.java:8: error: cannot find symbol
    public void f() { print("public C.f()"); }
                      ^
  symbol:   method print(String)
  location: class C
InnerImplementation.java:9: error: cannot find symbol
    public void g() { print("public C.g()"); }
                      ^
  symbol:   method print(String)
  location: class C
InnerImplementation.java:10: error: cannot find symbol
    void u() { print("package C.u()"); }
               ^
  symbol:   method print(String)
  location: class C
InnerImplementation.java:11: error: cannot find symbol
    protected void v() { print("protected C.v()"); }
                         ^
  symbol:   method print(String)
  location: class C
InnerImplementation.java:12: error: cannot find symbol
    private void w() { print("private C.w()"); }
                       ^
  symbol:   method print(String)
  location: class C
InnerImplementation.java:19: error: cannot find symbol
    A a = InnerA.makeA();
    ^
  symbol:   class A
  location: class InnerImplementation
InterfaceViolation.java:12: error: cannot find symbol
    A a = new B();
    ^
  symbol:   class A
  location: class InterfaceViolation
InterfaceViolation.java:17: warning: [cast] redundant cast to A
      B b = (B)a;
            ^
Robot.java:11: error: cannot find symbol
      if(r instanceof Null)
                      ^
  symbol:   class Null
  location: class Test
NullRobot.java:32: warning: [rawtypes] found raw type: Class
      new Class[]{ Null.class, Robot.class },
          ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
NullRobot.java:32: error: cannot find symbol
      new Class[]{ Null.class, Robot.class },
                   ^
  symbol:   class Null
  location: class NullRobot
PetCount.java:20: error: cannot find symbol
    for(Pet pet : creator.createArray(20)) {
        ^
  symbol:   class Pet
  location: class PetCount
PetCount.java:23: error: cannot find symbol
      if(pet instanceof Pet)
                        ^
  symbol:   class Pet
  location: class PetCount
PetCount.java:25: error: cannot find symbol
      if(pet instanceof Dog)
                        ^
  symbol:   class Dog
  location: class PetCount
PetCount.java:27: error: cannot find symbol
      if(pet instanceof Mutt)
                        ^
  symbol:   class Mutt
  location: class PetCount
PetCount.java:29: error: cannot find symbol
      if(pet instanceof Pug)
                        ^
  symbol:   class Pug
  location: class PetCount
PetCount.java:31: error: cannot find symbol
      if(pet instanceof Cat)
                        ^
  symbol:   class Cat
  location: class PetCount
PetCount.java:33: error: cannot find symbol
      if(pet instanceof Manx)
                        ^
  symbol:   class Manx
  location: class PetCount
PetCount.java:35: error: cannot find symbol
      if(pet instanceof Manx)
                        ^
  symbol:   class Manx
  location: class PetCount
PetCount.java:37: error: cannot find symbol
      if(pet instanceof Manx)
                        ^
  symbol:   class Manx
  location: class PetCount
PetCount.java:39: error: cannot find symbol
      if(pet instanceof Rodent)
                        ^
  symbol:   class Rodent
  location: class PetCount
PetCount.java:41: error: cannot find symbol
      if(pet instanceof Rat)
                        ^
  symbol:   class Rat
  location: class PetCount
PetCount.java:43: error: cannot find symbol
      if(pet instanceof Mouse)
                        ^
  symbol:   class Mouse
  location: class PetCount
PetCount.java:45: error: cannot find symbol
      if(pet instanceof Hamster)
                        ^
  symbol:   class Hamster
  location: class PetCount
PetCount.java:49: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class PetCount
PetCount.java:50: error: cannot find symbol
    print(counter);
    ^
  symbol:   method print(PetCounter)
  location: class PetCount
PetCount.java:53: error: cannot find symbol
    countPets(new ForNameCreator());
                  ^
  symbol:   class ForNameCreator
  location: class PetCount
PetCount2.java:6: error: cannot find symbol
    PetCount.countPets(Pets.creator);
                       ^
  symbol:   variable Pets
  location: class PetCount2
PetCount3.java:12: error: cannot find symbol
      super(MapData.map(LiteralPetCreator.allTypes, 0));
                        ^
  symbol:   variable LiteralPetCreator
  location: class PetCounter
PetCount3.java:12: error: cannot find symbol
      super(MapData.map(LiteralPetCreator.allTypes, 0));
            ^
  symbol:   variable MapData
  location: class PetCounter
PetCount3.java:16: error: cannot find symbol
      for(Map.Entry<Class<? extends Pet>,Integer> pair
                                    ^
  symbol:   class Pet
  location: class PetCounter
PetCount3.java:23: error: cannot find symbol
      for(Map.Entry<Class<? extends Pet>,Integer> pair
                                    ^
  symbol:   class Pet
  location: class PetCounter
PetCount3.java:37: error: cannot find symbol
    for(Pet pet : Pets.createArray(20)) {
                  ^
  symbol:   variable Pets
  location: class PetCount3
PetCount3.java:37: error: cannot find symbol
    for(Pet pet : Pets.createArray(20)) {
        ^
  symbol:   class Pet
  location: class PetCount3
PetCount3.java:41: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class PetCount3
PetCount3.java:42: error: cannot find symbol
    print(petCount);
    ^
  symbol:   method print(PetCounter)
  location: class PetCount3
PetCount4.java:8: error: cannot find symbol
    TypeCounter counter = new TypeCounter(Pet.class);
    ^
  symbol:   class TypeCounter
  location: class PetCount4
PetCount4.java:8: error: cannot find symbol
    TypeCounter counter = new TypeCounter(Pet.class);
                              ^
  symbol:   class TypeCounter
  location: class PetCount4
PetCount4.java:8: error: cannot find symbol
    TypeCounter counter = new TypeCounter(Pet.class);
                                          ^
  symbol:   class Pet
  location: class PetCount4
PetCount4.java:9: error: cannot find symbol
    for(Pet pet : Pets.createArray(20)) {
                  ^
  symbol:   variable Pets
  location: class PetCount4
PetCount4.java:9: error: cannot find symbol
    for(Pet pet : Pets.createArray(20)) {
        ^
  symbol:   class Pet
  location: class PetCount4
PetCount4.java:13: error: cannot find symbol
    print();
    ^
  symbol:   method print()
  location: class PetCount4
RegisteredFactories.java:11: error: cannot find symbol
    new ArrayList<Factory<? extends Part>>();	
                  ^
  symbol:   class Factory
  location: class Part
SelectingMethods.java:15: error: cannot find symbol
      print("Proxy detected the interesting method");
      ^
  symbol:   method print(String)
  location: class MethodSelector
SelectingMethods.java:28: error: cannot find symbol
  public void boring1() { print("boring1"); }
                          ^
  symbol:   method print(String)
  location: class Implementation
SelectingMethods.java:29: error: cannot find symbol
  public void boring2() { print("boring2"); }
                          ^
  symbol:   method print(String)
  location: class Implementation
SelectingMethods.java:31: error: cannot find symbol
    print("interesting " + arg);
    ^
  symbol:   method print(String)
  location: class Implementation
SelectingMethods.java:40: warning: [rawtypes] found raw type: Class
      new Class[]{ SomeMethods.class },
          ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ShowMethods.java:26: warning: [rawtypes] found raw type: Constructor
      Constructor[] ctors = c.getConstructors();
      ^
  missing type arguments for generic class Constructor<T>
  where T is a type-variable:
    T extends Object declared in class Constructor
ShowMethods.java:31: warning: [rawtypes] found raw type: Constructor
        for(Constructor ctor : ctors)
            ^
  missing type arguments for generic class Constructor<T>
  where T is a type-variable:
    T extends Object declared in class Constructor
ShowMethods.java:41: warning: [rawtypes] found raw type: Constructor
        for(Constructor ctor : ctors)
            ^
  missing type arguments for generic class Constructor<T>
  where T is a type-variable:
    T extends Object declared in class Constructor
SimpleDynamicProxy.java:27: warning: auxiliary class RealObject in SimpleProxyDemo.java should not be accessed from outside its own source file
    RealObject real = new RealObject();
    ^
SimpleDynamicProxy.java:27: warning: auxiliary class RealObject in SimpleProxyDemo.java should not be accessed from outside its own source file
    RealObject real = new RealObject();
                          ^
SimpleDynamicProxy.java:30: warning: auxiliary class Interface in SimpleProxyDemo.java should not be accessed from outside its own source file
    Interface proxy = (Interface)Proxy.newProxyInstance(
    ^
SimpleDynamicProxy.java:30: warning: auxiliary class Interface in SimpleProxyDemo.java should not be accessed from outside its own source file
    Interface proxy = (Interface)Proxy.newProxyInstance(
                       ^
SimpleDynamicProxy.java:31: warning: auxiliary class Interface in SimpleProxyDemo.java should not be accessed from outside its own source file
      Interface.class.getClassLoader(),
      ^
SimpleDynamicProxy.java:32: warning: [rawtypes] found raw type: Class
      new Class[]{ Interface.class },
          ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
SimpleDynamicProxy.java:32: warning: auxiliary class Interface in SimpleProxyDemo.java should not be accessed from outside its own source file
      new Class[]{ Interface.class },
                   ^
100 errors
20 warnings

========================================
./typeinfo/factory
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./typeinfo/interfacea
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./typeinfo/packageaccess
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
HiddenC.java:3: error: package typeinfo.interfacea does not exist
import typeinfo.interfacea.*;
^
HiddenC.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
HiddenC.java:6: error: cannot find symbol
class C implements A {
                   ^
  symbol: class A
HiddenC.java:15: error: cannot find symbol
  public static A makeA() { return new C(); }
                ^
  symbol:   class A
  location: class HiddenC
HiddenC.java:7: error: cannot find symbol
  public void f() { print("public C.f()"); }
                    ^
  symbol:   method print(String)
  location: class C
HiddenC.java:8: error: cannot find symbol
  public void g() { print("public C.g()"); }
                    ^
  symbol:   method print(String)
  location: class C
HiddenC.java:9: error: cannot find symbol
  void u() { print("package C.u()"); }
             ^
  symbol:   method print(String)
  location: class C
HiddenC.java:10: error: cannot find symbol
  protected void v() { print("protected C.v()"); }
                       ^
  symbol:   method print(String)
  location: class C
HiddenC.java:11: error: cannot find symbol
  private void w() { print("private C.w()"); }
                     ^
  symbol:   method print(String)
  location: class C
9 errors
3 warnings

========================================
./typeinfo/pets
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
3 warnings

========================================
./typeinfo/toys
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
ToyTest.java:4: error: package net.mindview.util does not exist
import static net.mindview.util.Print.*;
                               ^
GenericToyTest.java:7: warning: auxiliary class FancyToy in ToyTest.java should not be accessed from outside its own source file
    Class<FancyToy> ftClass = FancyToy.class;
          ^
GenericToyTest.java:7: warning: auxiliary class FancyToy in ToyTest.java should not be accessed from outside its own source file
    Class<FancyToy> ftClass = FancyToy.class;
                              ^
GenericToyTest.java:9: warning: auxiliary class FancyToy in ToyTest.java should not be accessed from outside its own source file
    FancyToy fancyToy = ftClass.newInstance();
    ^
GenericToyTest.java:10: warning: auxiliary class FancyToy in ToyTest.java should not be accessed from outside its own source file
    Class<? super FancyToy> up = ftClass.getSuperclass();
                  ^
ToyTest.java:23: warning: [rawtypes] found raw type: Class
  static void printInfo(Class cc) {
                        ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ToyTest.java:24: error: cannot find symbol
    print("Class name: " + cc.getName() +
    ^
  symbol:   method print(String)
  location: class ToyTest
ToyTest.java:26: error: cannot find symbol
    print("Simple name: " + cc.getSimpleName());
    ^
  symbol:   method print(String)
  location: class ToyTest
ToyTest.java:27: error: cannot find symbol
    print("Canonical name : " + cc.getCanonicalName());
    ^
  symbol:   method print(String)
  location: class ToyTest
ToyTest.java:30: warning: [rawtypes] found raw type: Class
    Class c = null;
    ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ToyTest.java:34: error: cannot find symbol
      print("Can't find FancyToy");
      ^
  symbol:   method print(String)
  location: class ToyTest
ToyTest.java:38: warning: [rawtypes] found raw type: Class
    for(Class face : c.getInterfaces())
        ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ToyTest.java:40: warning: [rawtypes] found raw type: Class
    Class up = c.getSuperclass();
    ^
  missing type arguments for generic class Class<T>
  where T is a type-variable:
    T extends Object declared in class Class
ToyTest.java:46: error: cannot find symbol
      print("Cannot instantiate");
      ^
  symbol:   method print(String)
  location: class ToyTest
ToyTest.java:49: error: cannot find symbol
      print("Cannot access");
      ^
  symbol:   method print(String)
  location: class ToyTest
7 errors
11 warnings

========================================
./xml
========================================
warning: [options] bootstrap class path not set in conjunction with -source 1.5
warning: [options] source value 1.5 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
People.java:5: error: package nu.xom does not exist
import nu.xom.*;
^
Person.java:5: error: package nu.xom does not exist
import nu.xom.*;
^
Person.java:16: error: cannot find symbol
  public Element getXML() {
         ^
  symbol:   class Element
  location: class Person
Person.java:27: error: cannot find symbol
  public Person(Element person) {
                ^
  symbol:   class Element
  location: class Person
Person.java:34: error: cannot find symbol
  format(OutputStream os, Document doc) throws Exception {
                          ^
  symbol:   class Document
  location: class Person
People.java:10: error: cannot find symbol
    Document doc = new Builder().build(fileName);
    ^
  symbol:   class Document
  location: class People
People.java:10: error: cannot find symbol
    Document doc = new Builder().build(fileName);
                       ^
  symbol:   class Builder
  location: class People
People.java:11: error: cannot find symbol
    Elements elements =
    ^
  symbol:   class Elements
  location: class People
Person.java:17: error: cannot find symbol
    Element person = new Element("person");
    ^
  symbol:   class Element
  location: class Person
Person.java:17: error: cannot find symbol
    Element person = new Element("person");
                         ^
  symbol:   class Element
  location: class Person
Person.java:18: error: cannot find symbol
    Element firstName = new Element("first");
    ^
  symbol:   class Element
  location: class Person
Person.java:18: error: cannot find symbol
    Element firstName = new Element("first");
                            ^
  symbol:   class Element
  location: class Person
Person.java:20: error: cannot find symbol
    Element lastName = new Element("last");
    ^
  symbol:   class Element
  location: class Person
Person.java:20: error: cannot find symbol
    Element lastName = new Element("last");
                           ^
  symbol:   class Element
  location: class Person
Person.java:35: error: cannot find symbol
    Serializer serializer= new Serializer(os,"ISO-8859-1");
    ^
  symbol:   class Serializer
  location: class Person
Person.java:35: error: cannot find symbol
    Serializer serializer= new Serializer(os,"ISO-8859-1");
                               ^
  symbol:   class Serializer
  location: class Person
Person.java:47: error: cannot find symbol
    Element root = new Element("people");
    ^
  symbol:   class Element
  location: class Person
Person.java:47: error: cannot find symbol
    Element root = new Element("people");
                       ^
  symbol:   class Element
  location: class Person
Person.java:50: error: cannot find symbol
    Document doc = new Document(root);
    ^
  symbol:   class Document
  location: class Person
Person.java:50: error: cannot find symbol
    Document doc = new Document(root);
                       ^
  symbol:   class Document
  location: class Person
20 errors
3 warnings

